{"ID":"20240215210841-8ppbz1r","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240215210841-8ppbz1r","title":"malloc 是如何分配内存的？","updated":"20240215210902"},"Children":[{"ID":"20240215210842-v24rrou","Type":"NodeParagraph","Properties":{"id":"20240215210842-v24rrou","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"大家好，我是小林。"}]},{"ID":"20240215210842-ijmx066","Type":"NodeParagraph","Properties":{"id":"20240215210842-ijmx066","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"这次我们就以 malloc 动态内存分配为切入点，我在文中也做了小实验："}]},{"ID":"20240215210842-5n25epc","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-5n25epc","updated":"20240215210842"},"Children":[{"ID":"20240215210842-8rgd3q8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-8rgd3q8","updated":"20240215210842"},"Children":[{"ID":"20240215210842-57eghki","Type":"NodeParagraph","Properties":{"id":"20240215210842-57eghki","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"malloc 是如何分配内存的？"}]}]},{"ID":"20240215210842-7x9b3ip","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-7x9b3ip","updated":"20240215210842"},"Children":[{"ID":"20240215210842-jxzpzdz","Type":"NodeParagraph","Properties":{"id":"20240215210842-jxzpzdz","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"malloc 分配的是物理内存吗？"}]}]},{"ID":"20240215210842-hpd6fuh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-hpd6fuh","updated":"20240215210842"},"Children":[{"ID":"20240215210842-21945c1","Type":"NodeParagraph","Properties":{"id":"20240215210842-21945c1","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"malloc(1) 会分配多大的内存？"}]}]},{"ID":"20240215210842-1y3jq60","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-1y3jq60","updated":"20240215210842"},"Children":[{"ID":"20240215210842-u9ef3kb","Type":"NodeParagraph","Properties":{"id":"20240215210842-u9ef3kb","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"free 释放内存，会归还给操作系统吗？"}]}]},{"ID":"20240215210842-l4kwkj4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-l4kwkj4","updated":"20240215210842"},"Children":[{"ID":"20240215210842-2qnzv9w","Type":"NodeParagraph","Properties":{"id":"20240215210842-2qnzv9w","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"free() 函数只传入一个内存地址，为什么能知道要释放多大的内存？"}]}]}]},{"ID":"20240215210842-3vt07nk","Type":"NodeParagraph","Properties":{"id":"20240215210842-3vt07nk","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"发车！"}]},{"ID":"20240215210842-9xl33qj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-9xl33qj","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#linux-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"Linux 进程的内存分布长什么样？"}]},{"ID":"20240215210842-i7oa7qp","Type":"NodeParagraph","Properties":{"id":"20240215210842-i7oa7qp","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"在 Linux 操作系统中，虚拟地址空间的内部又被分为"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"内核空间和用户空间"},{"Type":"NodeText","Data":"两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示："}]},{"ID":"20240215210842-xg8zafi","Type":"NodeParagraph","Properties":{"id":"20240215210842-xg8zafi","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/1db038e1d2e5325b05e2bb80475d962a.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-hkoo7ij","Type":"NodeParagraph","Properties":{"id":"20240215210842-hkoo7ij","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"通过这里可以看出："}]},{"ID":"20240215210842-5k8gzy1","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-5k8gzy1","updated":"20240215210843"},"Children":[{"ID":"20240215210842-jyimmkl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-jyimmkl","updated":"20240215210842"},"Children":[{"ID":"20240215210842-r2fgr71","Type":"NodeParagraph","Properties":{"id":"20240215210842-r2fgr71","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"32"},{"Type":"NodeText","Data":"​ 位系统的内核空间占用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1G"},{"Type":"NodeText","Data":"​，位于最高处，剩下的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"3G"},{"Type":"NodeText","Data":"​ 是用户空间；"}]}]},{"ID":"20240215210842-5kfsv2x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-5kfsv2x","updated":"20240215210842"},"Children":[{"ID":"20240215210842-dbdwwmu","Type":"NodeParagraph","Properties":{"id":"20240215210842-dbdwwmu","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"64"},{"Type":"NodeText","Data":"​ 位系统的内核空间和用户空间都是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"128T"},{"Type":"NodeText","Data":"​，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。"}]}]}]},{"ID":"20240215210842-zigk1n9","Type":"NodeParagraph","Properties":{"id":"20240215210842-zigk1n9","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"再来说说，内核空间与用户空间的区别："}]},{"ID":"20240215210842-3oscf1i","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-3oscf1i","updated":"20240215210843"},"Children":[{"ID":"20240215210842-6jjoqrn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-6jjoqrn","updated":"20240215210842"},"Children":[{"ID":"20240215210842-tw7nony","Type":"NodeParagraph","Properties":{"id":"20240215210842-tw7nony","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"进程在用户态时，只能访问用户空间内存；"}]}]},{"ID":"20240215210842-e2ftewo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-e2ftewo","updated":"20240215210842"},"Children":[{"ID":"20240215210842-a35zbrb","Type":"NodeParagraph","Properties":{"id":"20240215210842-a35zbrb","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"只有进入内核态后，才可以访问内核空间的内存；"}]}]}]},{"ID":"20240215210842-f2a3lxh","Type":"NodeParagraph","Properties":{"id":"20240215210842-f2a3lxh","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"虽然每个进程都各自有独立的虚拟内存，但是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"每个虚拟内存中的内核地址，其实关联的都是相同的物理内存"},{"Type":"NodeText","Data":"。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。"}]},{"ID":"20240215210842-e1g31g8","Type":"NodeParagraph","Properties":{"id":"20240215210842-e1g31g8","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/c88bda5db60029f3ea57e4306e7da936.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-i3k8xas","Type":"NodeParagraph","Properties":{"id":"20240215210842-i3k8xas","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"接下来，进一步了解虚拟空间的划分情况，用户空间和内核空间划分的方式是不同的，内核空间的分布情况就不多说了。"}]},{"ID":"20240215210842-772hvvt","Type":"NodeParagraph","Properties":{"id":"20240215210842-772hvvt","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"我们看看用户空间分布的情况，以 32 位系统为例，我画了一张图来表示它们的关系："}]},{"ID":"20240215210842-j53xxhg","Type":"NodeParagraph","Properties":{"id":"20240215210842-j53xxhg","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"通过这张图你可以看到，用户空间内存从"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"低到高"},{"Type":"NodeText","Data":"分别是 6 种不同的内存段："}]},{"ID":"20240215210842-owd9eo8","Type":"NodeParagraph","Properties":{"id":"20240215210842-owd9eo8","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"虚拟内存空间划分"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com/gh/xiaolincoder/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/32%E4%BD%8D%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-nbxqi0f","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-nbxqi0f","updated":"20240215210843"},"Children":[{"ID":"20240215210842-c39cd33","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-c39cd33","updated":"20240215210842"},"Children":[{"ID":"20240215210842-o8wmohe","Type":"NodeParagraph","Properties":{"id":"20240215210842-o8wmohe","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"代码段，包括二进制可执行代码；"}]}]},{"ID":"20240215210842-cac7712","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-cac7712","updated":"20240215210842"},"Children":[{"ID":"20240215210842-ezcwcaj","Type":"NodeParagraph","Properties":{"id":"20240215210842-ezcwcaj","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"数据段，包括已初始化的静态常量和全局变量；"}]}]},{"ID":"20240215210842-ao5pzsz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-ao5pzsz","updated":"20240215210842"},"Children":[{"ID":"20240215210842-98f0gnm","Type":"NodeParagraph","Properties":{"id":"20240215210842-98f0gnm","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"BSS 段，包括未初始化的静态变量和全局变量；"}]}]},{"ID":"20240215210842-54x9jvx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-54x9jvx","updated":"20240215210842"},"Children":[{"ID":"20240215210842-g0tztsn","Type":"NodeParagraph","Properties":{"id":"20240215210842-g0tztsn","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"堆段，包括动态分配的内存，从低地址开始向上增长；"}]}]},{"ID":"20240215210842-qykivqt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-qykivqt","updated":"20240215210842"},"Children":[{"ID":"20240215210842-pmrvgxo","Type":"NodeParagraph","Properties":{"id":"20240215210842-pmrvgxo","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"文件映射段，包括动态库、共享内存等，从低地址开始向上增长（"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"http://lishiwen4.github.io/linux/linux-process-memory-location","TextMarkTextContent":"跟硬件和内核版本有关 "},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"http://lishiwen4.github.io/linux/linux-process-memory-location","TextMarkTextContent":"(opens new window)"},{"Type":"NodeText","Data":"）；"}]}]},{"ID":"20240215210842-zkmeg3j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-zkmeg3j","updated":"20240215210842"},"Children":[{"ID":"20240215210842-x6li6cj","Type":"NodeParagraph","Properties":{"id":"20240215210842-x6li6cj","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"8 MB"},{"Type":"NodeText","Data":"​。当然系统也提供了参数，以便我们自定义大小；"}]}]}]},{"ID":"20240215210842-mn5tz53","Type":"NodeParagraph","Properties":{"id":"20240215210842-mn5tz53","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"在这 6 个内存段中，堆和文件映射段的内存是动态分配的。比如说，使用 C 标准库的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"malloc()"},{"Type":"NodeText","Data":"​ 或者 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mmap()"},{"Type":"NodeText","Data":"​ ，就可以分别在堆和文件映射段动态分配内存。"}]},{"ID":"20240215210842-qtaos33","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-qtaos33","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#malloc-%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E7%9A%84","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"malloc 是如何分配内存的？"}]},{"ID":"20240215210842-jkp1hld","Type":"NodeParagraph","Properties":{"id":"20240215210842-jkp1hld","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"实际上，malloc() 并不是系统调用，而是 C 库里的函数，用于动态分配内存。"}]},{"ID":"20240215210842-cw9dovm","Type":"NodeParagraph","Properties":{"id":"20240215210842-cw9dovm","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"malloc 申请内存的时候，会有两种方式向操作系统申请堆内存。"}]},{"ID":"20240215210842-ngw07mq","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-ngw07mq","updated":"20240215210843"},"Children":[{"ID":"20240215210842-7teaq62","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-7teaq62","updated":"20240215210842"},"Children":[{"ID":"20240215210842-677f8su","Type":"NodeParagraph","Properties":{"id":"20240215210842-677f8su","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"方式一：通过 brk() 系统调用从堆分配内存"}]}]},{"ID":"20240215210842-ktjp65o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-ktjp65o","updated":"20240215210842"},"Children":[{"ID":"20240215210842-rmj53af","Type":"NodeParagraph","Properties":{"id":"20240215210842-rmj53af","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"方式二：通过 mmap() 系统调用在文件映射区域分配内存；"}]}]}]},{"ID":"20240215210842-i68e4zk","Type":"NodeParagraph","Properties":{"id":"20240215210842-i68e4zk","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"方式一实现的方式很简单，就是通过 brk() 函数将「堆顶」指针向高地址移动，获得新的内存空间。如下图："}]},{"ID":"20240215210842-e7q5kkc","Type":"NodeParagraph","Properties":{"id":"20240215210842-e7q5kkc","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/brk%E7%94%B3%E8%AF%B7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-p53fyyz","Type":"NodeParagraph","Properties":{"id":"20240215210842-p53fyyz","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"方式二通过 mmap() 系统调用中「私有匿名映射」的方式，在文件映射区分配一块内存，也就是从文件映射区“偷”了一块内存。如下图："}]},{"ID":"20240215210842-bqoqpv7","Type":"NodeParagraph","Properties":{"id":"20240215210842-bqoqpv7","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/mmap%E7%94%B3%E8%AF%B7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-puzrrzs","Type":"NodeBlockquote","Properties":{"id":"20240215210842-puzrrzs","updated":"20240215210843"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240215210842-ooji4wy","Type":"NodeParagraph","Properties":{"id":"20240215210842-ooji4wy","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"什么场景下 malloc() 会通过 brk() 分配内存？又是什么场景下通过 mmap() 分配内存？"}]}]},{"ID":"20240215210842-le5cytn","Type":"NodeParagraph","Properties":{"id":"20240215210842-le5cytn","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"malloc() 源码里默认定义了一个阈值："}]},{"ID":"20240215210842-z872joz","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-z872joz","updated":"20240215210843"},"Children":[{"ID":"20240215210842-hzxis7z","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-hzxis7z","updated":"20240215210842"},"Children":[{"ID":"20240215210842-n1tar4w","Type":"NodeParagraph","Properties":{"id":"20240215210842-n1tar4w","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"如果用户分配的内存小于 128 KB，则通过 brk() 申请内存；"}]}]},{"ID":"20240215210842-nxer1zj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-nxer1zj","updated":"20240215210842"},"Children":[{"ID":"20240215210842-pymtc0v","Type":"NodeParagraph","Properties":{"id":"20240215210842-pymtc0v","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"如果用户分配的内存大于 128 KB，则通过 mmap() 申请内存；"}]}]}]},{"ID":"20240215210842-668jv4t","Type":"NodeParagraph","Properties":{"id":"20240215210842-668jv4t","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"注意，不同的 glibc 版本定义的阈值也是不同的。"}]},{"ID":"20240215210842-43i8rz8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-43i8rz8","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#malloc-%E5%88%86%E9%85%8D%E7%9A%84%E6%98%AF%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%90%97","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"malloc() 分配的是物理内存吗？"}]},{"ID":"20240215210842-ojwrkso","Type":"NodeParagraph","Properties":{"id":"20240215210842-ojwrkso","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"不是的，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"malloc() 分配的是虚拟内存"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240215210842-nkghmxl","Type":"NodeParagraph","Properties":{"id":"20240215210842-nkghmxl","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"如果分配后的虚拟内存没有被访问的话，虚拟内存是不会映射到物理内存的，这样就不会占用物理内存了。"}]},{"ID":"20240215210842-kr1hfqo","Type":"NodeParagraph","Properties":{"id":"20240215210842-kr1hfqo","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"只有在访问已分配的虚拟地址空间的时候，操作系统通过查找页表，发现虚拟内存对应的页没有在物理内存中，就会触发缺页中断，然后操作系统会建立虚拟内存和物理内存之间的映射关系。"}]},{"ID":"20240215210842-aaa1e2k","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-aaa1e2k","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#malloc-1-%E4%BC%9A%E5%88%86%E9%85%8D%E5%A4%9A%E5%A4%A7%E7%9A%84%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"malloc(1) 会分配多大的虚拟内存？"}]},{"ID":"20240215210842-92awoy7","Type":"NodeParagraph","Properties":{"id":"20240215210842-92awoy7","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"malloc() 在分配内存的时候，并不是老老实实按用户预期申请的字节数来分配内存空间大小，而是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"会预分配更大的空间作为内存池"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240215210842-v9tydqp","Type":"NodeParagraph","Properties":{"id":"20240215210842-v9tydqp","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"具体会预分配多大的空间，跟 malloc 使用的内存管理器有关系，我们就以 malloc 默认的内存管理器（Ptmalloc2）来分析。"}]},{"ID":"20240215210842-gk8n2ql","Type":"NodeParagraph","Properties":{"id":"20240215210842-gk8n2ql","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"接下里，我们做个实验，用下面这个代码，通过 malloc 申请 1 字节的内存时，看看操作系统实际分配了多大的内存空间。"}]},{"ID":"20240215210842-pty616f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215210842-pty616f","updated":"20240215210843"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cmalloc.h\u003e\n\nint main() {\n  printf(\"使用cat /proc/%d/maps查看内存分配\\n\",getpid());\n  \n  //申请1字节的内存\n  void *addr = malloc(1);\n  printf(\"此1字节的内存起始地址：%x\\n\", addr);\n  printf(\"使用cat /proc/%d/maps查看内存分配\\n\",getpid());\n \n  //将程序阻塞，当输入任意字符时才往下执行\n  getchar();\n\n  //释放内存\n  free(addr);\n  printf(\"释放了1字节的内存，但heap堆并不会释放\\n\");\n  \n  getchar();\n  return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215210842-1r5fbkp","Type":"NodeParagraph","Properties":{"id":"20240215210842-1r5fbkp","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"执行代码（"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"先提前说明，我使用的 glibc 库的版本是 2.17"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240215210842-pb6uiiv","Type":"NodeParagraph","Properties":{"id":"20240215210842-pb6uiiv","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/080ee187c8c92db45092b6688774e8da.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-b642h6u","Type":"NodeParagraph","Properties":{"id":"20240215210842-b642h6u","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"我们可以通过 /proc//maps 文件查看进程的内存分布情况。我在 maps 文件通过此 1 字节的内存起始地址过滤出了内存地址的范围。"}]},{"ID":"20240215210842-o3ymoun","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215210842-o3ymoun","updated":"20240215210843"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw="},{"Type":"NodeCodeBlockCode","Data":"[root@xiaolin ~]# cat /proc/3191/maps | grep d730\n00d73000-00d94000 rw-p 00000000 00:00 0                                  [heap]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215210842-if4qc2q","Type":"NodeParagraph","Properties":{"id":"20240215210842-if4qc2q","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"这个例子分配的内存小于 128 KB，所以是通过 brk() 系统调用向堆空间申请的内存，因此可以看到最右边有 [heap] 的标识。"}]},{"ID":"20240215210842-9fr6ge3","Type":"NodeParagraph","Properties":{"id":"20240215210842-9fr6ge3","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"可以看到，堆空间的内存地址范围是 00d73000-00d94000，这个范围大小是 132KB，也就说明了 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"malloc(1) 实际上预分配 132K 字节的内存"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240215210842-396v45t","Type":"NodeParagraph","Properties":{"id":"20240215210842-396v45t","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"可能有的同学注意到了，程序里打印的内存起始地址是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"d73010"},{"Type":"NodeText","Data":"​，而 maps 文件显示堆内存空间的起始地址是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"d73000"},{"Type":"NodeText","Data":"​，为什么会多出来 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"0x10"},{"Type":"NodeText","Data":"​ （16字节）呢？这个问题，我们先放着，后面会说。"}]},{"ID":"20240215210842-hvix0io","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-hvix0io","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#free-%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98-%E4%BC%9A%E5%BD%92%E8%BF%98%E7%BB%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%90%97","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"free 释放内存，会归还给操作系统吗？"}]},{"ID":"20240215210842-2iwc7zh","Type":"NodeParagraph","Properties":{"id":"20240215210842-2iwc7zh","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"我们在上面的进程往下执行，看看通过 free() 函数释放内存后，堆内存还在吗？"}]},{"ID":"20240215210842-q2koois","Type":"NodeParagraph","Properties":{"id":"20240215210842-q2koois","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/1a9337f8f6b83fbc186f257511b5ce67.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-xyj578e","Type":"NodeParagraph","Properties":{"id":"20240215210842-xyj578e","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"从下图可以看到，通过 free 释放内存后，堆内存还是存在的，并没有归还给操作系统。"}]},{"ID":"20240215210842-j5maa8s","Type":"NodeParagraph","Properties":{"id":"20240215210842-j5maa8s","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/2b8f63892830553ec04c5f05f336ae8b.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-wimqtav","Type":"NodeParagraph","Properties":{"id":"20240215210842-wimqtav","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"这是因为与其把这 1 字节释放给操作系统，不如先缓存着放进 malloc 的内存池里，当进程再次申请 1 字节的内存时就可以直接复用，这样速度快了很多。"}]},{"ID":"20240215210842-wcuan6d","Type":"NodeParagraph","Properties":{"id":"20240215210842-wcuan6d","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"当然，当进程退出后，操作系统就会回收进程的所有资源。"}]},{"ID":"20240215210842-y3tvbnt","Type":"NodeParagraph","Properties":{"id":"20240215210842-y3tvbnt","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"上面说的 free 内存后堆内存还存在，是针对 malloc 通过 brk() 方式申请的内存的情况。"}]},{"ID":"20240215210842-f9nlwwg","Type":"NodeParagraph","Properties":{"id":"20240215210842-f9nlwwg","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"如果 malloc 通过 mmap 方式申请的内存，free 释放内存后就会归归还给操作系统。"}]},{"ID":"20240215210842-yv2zxhk","Type":"NodeParagraph","Properties":{"id":"20240215210842-yv2zxhk","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"我们做个实验验证下， 通过 malloc 申请 128 KB 字节的内存，来使得 malloc 通过 mmap 方式来分配内存。"}]},{"ID":"20240215210842-unxgboj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215210842-unxgboj","updated":"20240215210843"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cmalloc.h\u003e\n\nint main() {\n  //申请1字节的内存\n  void *addr = malloc(128*1024);\n  printf(\"此128KB字节的内存起始地址：%x\\n\", addr);\n  printf(\"使用cat /proc/%d/maps查看内存分配\\n\",getpid());\n\n  //将程序阻塞，当输入任意字符时才往下执行\n  getchar();\n\n  //释放内存\n  free(addr);\n  printf(\"释放了128KB字节的内存，内存也归还给了操作系统\\n\");\n\n  getchar();\n  return 0;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215210842-ial2206","Type":"NodeParagraph","Properties":{"id":"20240215210842-ial2206","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"执行代码："}]},{"ID":"20240215210842-uqe8ud3","Type":"NodeParagraph","Properties":{"id":"20240215210842-uqe8ud3","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/500fdc021d956f60963f308760f511d0.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-i76hsbv","Type":"NodeParagraph","Properties":{"id":"20240215210842-i76hsbv","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"查看进程的内存的分布情况，可以发现最右边没有 [heap] 标志，说明是通过 mmap 以匿名映射的方式从文件映射区分配的匿名内存。"}]},{"ID":"20240215210842-e1zrclo","Type":"NodeParagraph","Properties":{"id":"20240215210842-e1zrclo","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/501f458b8d35abe5e378a0f14c667797.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-fen4e9a","Type":"NodeParagraph","Properties":{"id":"20240215210842-fen4e9a","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"然后我们释放掉这个内存看看："}]},{"ID":"20240215210842-ub7g1oy","Type":"NodeParagraph","Properties":{"id":"20240215210842-ub7g1oy","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/fcdbe91cc03b6a2f6e93dd1971d1b438.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-oy07nav","Type":"NodeParagraph","Properties":{"id":"20240215210842-oy07nav","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"再次查看该 128 KB 内存的起始地址，可以发现已经不存在了，说明归还给了操作系统。"}]},{"ID":"20240215210842-625myxw","Type":"NodeParagraph","Properties":{"id":"20240215210842-625myxw","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/3f63c56b131d92806b5aabca29d33a38.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-ab066p7","Type":"NodeParagraph","Properties":{"id":"20240215210842-ab066p7","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"对于 「malloc 申请的内存，free 释放内存会归还给操作系统吗？」这个问题，我们可以做个总结了："}]},{"ID":"20240215210842-hzaorcl","Type":"NodeList","ListData":{},"Properties":{"id":"20240215210842-hzaorcl","updated":"20240215210843"},"Children":[{"ID":"20240215210842-j0ajbys","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-j0ajbys","updated":"20240215210842"},"Children":[{"ID":"20240215210842-11dp8b9","Type":"NodeParagraph","Properties":{"id":"20240215210842-11dp8b9","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"malloc 通过 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"brk()"},{"Type":"NodeText","Data":" 方式申请的内存，free 释放内存的时候，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并不会把内存归还给操作系统，而是缓存在 malloc 的内存池中，待下次使用"},{"Type":"NodeText","Data":"；"}]}]},{"ID":"20240215210842-87uyt3u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215210842-87uyt3u","updated":"20240215210842"},"Children":[{"ID":"20240215210842-z2deeg7","Type":"NodeParagraph","Properties":{"id":"20240215210842-z2deeg7","updated":"20240215210842"},"Children":[{"Type":"NodeText","Data":"malloc 通过 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"mmap()"},{"Type":"NodeText","Data":" 方式申请的内存，free 释放内存的时候，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"会把内存归还给操作系统，内存得到真正的释放"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240215210842-9apjzpb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-9apjzpb","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%85%A8%E9%83%A8%E4%BD%BF%E7%94%A8-mmap-%E6%9D%A5%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"为什么不全部使用 mmap 来分配内存？"}]},{"ID":"20240215210842-uylbp1f","Type":"NodeParagraph","Properties":{"id":"20240215210842-uylbp1f","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"因为向操作系统申请内存，是要通过系统调用的，执行系统调用是要进入内核态的，然后在回到用户态，运行态的切换会耗费不少时间。"}]},{"ID":"20240215210842-mubjey1","Type":"NodeParagraph","Properties":{"id":"20240215210842-mubjey1","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"所以，申请内存的操作应该避免频繁的系统调用，如果都用 mmap 来分配内存，等于每次都要执行系统调用。"}]},{"ID":"20240215210842-4cushz5","Type":"NodeParagraph","Properties":{"id":"20240215210842-4cushz5","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"另外，因为 mmap 分配的内存每次释放的时候，都会归还给操作系统，于是每次 mmap 分配的虚拟地址都是缺页状态的，然后在第一次访问该虚拟地址的时候，就会触发缺页中断。"}]},{"ID":"20240215210842-nzchgv6","Type":"NodeParagraph","Properties":{"id":"20240215210842-nzchgv6","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"也就是说，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"频繁通过 mmap 分配的内存话，不仅每次都会发生运行态的切换，还会发生缺页中断（在第一次访问虚拟地址后），这样会导致 CPU 消耗较大"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240215210842-stoqfxv","Type":"NodeParagraph","Properties":{"id":"20240215210842-stoqfxv","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"为了改进这两个问题，malloc 通过 brk() 系统调用在堆空间申请内存的时候，由于堆空间是连续的，所以直接预分配更大的内存来作为内存池，当内存释放的时候，就缓存在内存池中。"}]},{"ID":"20240215210842-63mvme2","Type":"NodeParagraph","Properties":{"id":"20240215210842-63mvme2","updated":"20240215210843"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"等下次在申请内存的时候，就直接从内存池取出对应的内存块就行了，而且可能这个内存块的虚拟地址与物理地址的映射关系还存在，这样不仅减少了系统调用的次数，也减少了缺页中断的次数，这将大大降低 CPU 的消耗"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240215210842-b1m3yus","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-b1m3yus","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#%E6%97%A2%E7%84%B6-brk-%E9%82%A3%E4%B9%88%E7%89%9B%E9%80%BC-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%85%A8%E9%83%A8%E4%BD%BF%E7%94%A8-brk-%E6%9D%A5%E5%88%86%E9%85%8D","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"既然 brk 那么牛逼，为什么不全部使用 brk 来分配？"}]},{"ID":"20240215210842-njecqtq","Type":"NodeParagraph","Properties":{"id":"20240215210842-njecqtq","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"前面我们提到通过 brk 从堆空间分配的内存，并不会归还给操作系统，那么我们那考虑这样一个场景。"}]},{"ID":"20240215210842-wljokw0","Type":"NodeParagraph","Properties":{"id":"20240215210842-wljokw0","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"如果我们连续申请了 10k，20k，30k 这三片内存，如果 10k 和 20k 这两片释放了，变为了空闲内存空间，如果下次申请的内存小于 30k，那么就可以重用这个空闲内存空间。"}]},{"ID":"20240215210842-oivyqgo","Type":"NodeParagraph","Properties":{"id":"20240215210842-oivyqgo","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/75edee0cb75450e7987a8a482b975bda.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-gt2g9qc","Type":"NodeParagraph","Properties":{"id":"20240215210842-gt2g9qc","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"但是如果下次申请的内存大于 30k，没有可用的空闲内存空间，必须向 OS 申请，实际使用内存继续增大。"}]},{"ID":"20240215210842-r51e80w","Type":"NodeParagraph","Properties":{"id":"20240215210842-r51e80w","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"因此，随着系统频繁地 malloc 和 free ，尤其对于小块内存，堆内将产生越来越多不可用的碎片，导致“内存泄露”。而这种“泄露”现象使用 valgrind 是无法检测出来的。"}]},{"ID":"20240215210842-o5w4bcl","Type":"NodeParagraph","Properties":{"id":"20240215210842-o5w4bcl","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"所以，malloc 实现中，充分考虑了 brk 和 mmap 行为上的差异及优缺点，默认分配大块内存 (128KB) 才使用 mmap 分配内存空间。"}]},{"ID":"20240215210842-sxxy4y6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215210842-sxxy4y6","updated":"20240215210842"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://xiaolincoding.com/os/3_memory/malloc.html#free-%E5%87%BD%E6%95%B0%E5%8F%AA%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E7%9F%A5%E9%81%93%E8%A6%81%E9%87%8A%E6%94%BE%E5%A4%9A%E5%A4%A7%E7%9A%84%E5%86%85%E5%AD%98","TextMarkTextContent":"#"},{"Type":"NodeText","Data":"free() 函数只传入一个内存地址，为什么能知道要释放多大的内存？"}]},{"ID":"20240215210842-0218852","Type":"NodeParagraph","Properties":{"id":"20240215210842-0218852","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"还记得，我前面提到， malloc 返回给用户态的内存起始地址比进程的堆空间起始地址多了 16 字节吗？"}]},{"ID":"20240215210842-t1ze1oh","Type":"NodeParagraph","Properties":{"id":"20240215210842-t1ze1oh","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"这个多出来的 16 字节就是保存了该内存块的描述信息，比如有该内存块的大小。"}]},{"ID":"20240215210842-jsn0ejp","Type":"NodeParagraph","Properties":{"id":"20240215210842-jsn0ejp","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://cdn.xiaolincoding.com//mysql/other/cb6e3ce4532ff0a6bfd60fe3e52a806e.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215210842-dvcv3r2","Type":"NodeParagraph","Properties":{"id":"20240215210842-dvcv3r2","updated":"20240215210843"},"Children":[{"Type":"NodeText","Data":"这样当执行 free() 函数时，free 会对传入进来的内存地址向左偏移 16 字节，然后从这个 16 字节的分析出当前的内存块的大小，自然就知道要释放多大的内存了。"}]}]}