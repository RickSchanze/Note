{"ID":"20240215211229-t7c6ba0","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240215211229-t7c6ba0","title":"UE45 开发面试题：Unreal","updated":"20240215211251"},"Children":[{"ID":"20240215211244-m5bbln6","Type":"NodeParagraph","Properties":{"id":"20240215211244-m5bbln6","updated":"20240215211251"},"Children":[{"Type":"NodeText","Data":"原文："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025","TextMarkTextContent":"UE4/5 开发面试题：Unreal - 知乎 (zhihu.com)"}]},{"ID":"20240215211251-engysbc","Type":"NodeThematicBreak","Properties":{"id":"20240215211251-engysbc"}},{"ID":"20240215211231-ssbz3jz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-ssbz3jz","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"1.游戏模式和游戏实例"}]},{"ID":"20240215211231-yjsuwzs","Type":"NodeList","ListData":{},"Properties":{"id":"20240215211231-yjsuwzs","updated":"20240215211232"},"Children":[{"ID":"20240215211231-ojqanh4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-ojqanh4","updated":"20240215211231"},"Children":[{"ID":"20240215211231-cbo9ql8","Type":"NodeParagraph","Properties":{"id":"20240215211231-cbo9ql8","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GameInstance"},{"Type":"NodeText","Data":"：游戏实例，架构上凌驾于最顶端，实例里的数据不会随着关卡的切换而消失。作用是为游戏保存临时的全局数据，或者自定义需要在全局使用的逻辑。在“项目设置 - 项目 - 地图和模式 - 游戏实例 - 游戏实例类”处修改。游戏运行时蓝图使用“GetGameInstance”节点获取，C++ 使用“UGameplayStatics::GetGameInstance()”函数获取。"}]}]},{"ID":"20240215211231-ikpb31j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-ikpb31j","updated":"20240215211231"},"Children":[{"ID":"20240215211231-cc0fvwh","Type":"NodeParagraph","Properties":{"id":"20240215211231-cc0fvwh","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GameMode"},{"Type":"NodeText","Data":"：设置游戏规则，在当前地图内生效。它可以规定玩家和观众数量，以及制定玩家进入游戏的方式，包含 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Spawn"},{"Type":"NodeText","Data":" 地点和生成/重生等行为的规则。联网状态下，只存在于服务端，客户端不能访问。在“项目设置 - 项目 - 地图和模式 - 默认模式 - 默认游戏模式”或“世界场景设置 - 游戏模式 - 游戏模式重载”或“Config - DefaultEngine.ini - GameMapsSettings - GlobalDefaultGameMode”处均可修改。"}]}]},{"ID":"20240215211231-7cw1lmy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-7cw1lmy","updated":"20240215211231"},"Children":[{"ID":"20240215211231-f5joc3o","Type":"NodeParagraph","Properties":{"id":"20240215211231-f5joc3o","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"DefaultPawn"},{"Type":"NodeText","Data":"：角色的外在表现类，是玩家在游戏中的物理代表，可包含自身的移动规则和其他游戏逻辑，服务端和客户端都存在一份，同时保持同步。在 GameMode 中修改。"}]}]},{"ID":"20240215211231-djgv2cv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-djgv2cv","updated":"20240215211231"},"Children":[{"ID":"20240215211231-kj04j7m","Type":"NodeParagraph","Properties":{"id":"20240215211231-kj04j7m","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"HUD"},{"Type":"NodeText","Data":"：是显示屏幕上覆盖元素的基本对象。游戏中每个由人类控制的玩家都有自己的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AHUD"},{"Type":"NodeText","Data":"​类实例，这个实例会绘制到个人视口上。只存在于客户端。在 GameMode 中修改。"}]}]},{"ID":"20240215211231-q0hf5rt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-q0hf5rt","updated":"20240215211231"},"Children":[{"ID":"20240215211231-qec0tf6","Type":"NodeParagraph","Properties":{"id":"20240215211231-qec0tf6","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"PlayerController"},{"Type":"NodeText","Data":"：非常重要的一个类，拥有 Pawn 并设置其行为规则，服务器上拥有所有玩家的PlayerController，而本地客户端则只有当前玩家的 PlayerController 。关联了客户端和服务端，通过该类，客户端可以向服务端发送请求。在 GameMode 中修改。"}]}]},{"ID":"20240215211231-yo3a366","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-yo3a366","updated":"20240215211231"},"Children":[{"ID":"20240215211231-bz0rgoo","Type":"NodeParagraph","Properties":{"id":"20240215211231-bz0rgoo","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GameState"},{"Type":"NodeText","Data":"：数据的全局管理，服务端和客户端都存在一份，它包含要复制到游戏中的每个客户端的信息，通常包含游戏分数、比赛是否已开始和基于世界场景玩家人数要生成的AI数量等的信息，以及其他特定于游戏的信息。通常用来保持数据的同步，也可将其中的部分数据设置为不同步。在 GameMode 中修改。"}]}]},{"ID":"20240215211231-p4il6s2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-p4il6s2","updated":"20240215211231"},"Children":[{"ID":"20240215211231-rxqpwjr","Type":"NodeParagraph","Properties":{"id":"20240215211231-rxqpwjr","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"PlayerState"},{"Type":"NodeText","Data":"：角色数据，该类需要通过 PlayerController 来访问。PlayerState 中保存当前玩家的一些信息，例如玩家姓名或得分、当前等级及生命值等，是对应玩家的数据容器。对于多人游戏，所有玩家的 PlayerState存在于所有机器上（与 PlayerController 不同），并且可以将数据从服务器复制到客户端以保持同步。在GameMode 中修改。"}]}]}]},{"ID":"20240215211231-mg73ulx","Type":"NodeTable","TableAligns":[0,0,0],"Properties":{"colgroup":"||","id":"20240215211231-mg73ulx","updated":"20240215211232"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"类"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"客户端"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"服务器"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"GameMode"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"——"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"DefaultPawn"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"HUD"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不存在"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"PlayerController"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"只有当前玩家"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"拥有所有玩家"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"GameState"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"存在"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"PlayerState"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"拥有所有玩家"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"拥有所有玩家"}]}]}]},{"ID":"20240215211231-4h8yxpt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-4h8yxpt","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"2.动态材质实例的作用"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_1","TextMarkTextContent":"[1]"}]},{"ID":"20240215211231-hft0x2u","Type":"NodeParagraph","Properties":{"id":"20240215211231-hft0x2u","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"动态材质实例 (MID) 是可以在游戏期间（在运行时）进行计算的实例化材质。这表示在游戏期间，您可使用脚本（经过编译的代码或蓝图可视脚本）来更改材质的参数，从而在游戏中改变该材质。这种材质的可能应用场合数不胜数，既可显示不同程度的损坏，也可更改绘图作业以混入不同皮肤纹理来回应面部表情。"}]},{"ID":"20240215211231-wxd5xdg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-wxd5xdg","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"3."},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单播委托、多播委托和动态委托的区别？"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_2","TextMarkTextContent":"[2]"}]},{"ID":"20240215211231-mehl0ov","Type":"NodeParagraph","Properties":{"id":"20240215211231-mehl0ov","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"委托是一种泛型但类型安全的方式，可在 C++ 对象上调用成员函数。可使用委托动态绑定到任意对象的成员函数，之后在该对象上调用函数，即使调用程序不知对象类型也可进行操作。"}]},{"ID":"20240215211231-0pjqxdo","Type":"NodeList","ListData":{},"Properties":{"id":"20240215211231-0pjqxdo","updated":"20240215211232"},"Children":[{"ID":"20240215211231-aun4j38","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-aun4j38","updated":"20240215211231"},"Children":[{"ID":"20240215211231-vc2y97l","Type":"NodeParagraph","Properties":{"id":"20240215211231-vc2y97l","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单播委托："},{"Type":"NodeText","Data":"只能绑定一个委托函数，绑定的委托函数可以有返回值，可接受不同数量的参数（最多支持9个函数参数），委托实例必须绑定在其声明时所定义的同返回类型和参数列表的函数，静态委托执行前最好检查是否绑定，否则会导致程序崩溃，如果重复进行绑定，会覆盖上一次的绑定。"}]}]},{"ID":"20240215211231-8syo6t7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-8syo6t7","updated":"20240215211231"},"Children":[{"ID":"20240215211231-iz5hphx","Type":"NodeParagraph","Properties":{"id":"20240215211231-iz5hphx","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"多播委托："},{"Type":"NodeText","Data":"拥有大部分与单播委托相同的功能。它们只拥有对对象的弱引用，可以与"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"结构体"},{"Type":"NodeText","Data":"一起使用，可以四处轻松复制等等。多播委托可以绑定多个委托函数，可以远程加载/保存和触发，但多播委托函数不能使用返回值。它们最适合用来四处轻松传递一组委托。多播委托在广播执行时不一定是按照绑定顺序来的，在广播执行时，不需要判断是否绑定了委托函数，直接广播执行即可。"}]}]},{"ID":"20240215211231-3hzfp3t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-3hzfp3t","updated":"20240215211231"},"Children":[{"ID":"20240215211231-bddnzzq","Type":"NodeParagraph","Properties":{"id":"20240215211231-bddnzzq","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"动态委托："},{"Type":"NodeText","Data":"动态委托包含动态单播和动态多播，支持蓝图序列化，即可以在蓝图中使用，其函数可按命名查找，但其执行速度比常规委托慢。"}]}]}]},{"ID":"20240215211231-rbibwhb","Type":"NodeTable","TableAligns":[0,0,0,0,0],"Properties":{"colgroup":"||||","id":"20240215211231-rbibwhb","updated":"20240215211232"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"委托"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"可绑定的委托函数"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"参数"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"返回值"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"序列化"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"单播"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"一个"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不支持"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"多播"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"多个"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不支持"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"动态单播"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"一个"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"动态多播"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"多个"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"支持"}]}]}]},{"ID":"20240215211231-nmj196z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-nmj196z","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"//单播委托\nDECLARE_DELEGATE(FDelegate);                                             //声明\nFDelegate Delegate;                                                      //定义\nDelegate.ExecuteIfBound();                                               //调用\nActorReference-\u003eDelegate.BindUObject(this, \u0026AMyActor::DelegateFunction); //绑定\n//多播委托\nDECLARE_MULTICAST_DELEGATE(FMulticastDelegate);\nFMulticastDelegate MulticastDelegate;\nMulticastDelegate.Broadcast();\nActorReference-\u003eMulticastDelegate.AddUObject(this, \u0026AMyActor::MulticastDelegateFunction);\n//动态单播委托\nDECLARE_DYNAMIC_DELEGATE(FDynamicDelegate);\nFDynamicDelegate DynamicDelegate;\nDynamicDelegate.ExecuteIfBound();\nActorReference-\u003eDynamicDelegate.BindDynamic(this, \u0026AMyActor::DynamicDelegateFunction);\n//动态多播委托\nDECLARE_DYNAMIC_MULTICAST_DELEGATE(FDynamicMulticastDelegate);\nFDynamicMulticastDelegate DynamicMulticastDelegate;\nDynamicMulticastDelegate.Broadcast();\nActorReference-\u003eDynamicMulticastDelegate.AddDynamic(this, \u0026AMyActor::DynamicMulticastDelegateFunction);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-pklag4b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-pklag4b","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"4.委托的底层原理"}]},{"ID":"20240215211231-y9b52oz","Type":"NodeParagraph","Properties":{"id":"20240215211231-y9b52oz","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"委托是一种观察者模式，也被称为代理，用于降低不同对象之间的耦合度，两个有关联的对象不对彼此的行为进行监听，而是通过委托来间接的建立联系，监听者将需要响应的函数绑定到委托对象上，使得委托在触发时调用所绑定的函数。"}]},{"ID":"20240215211231-6l8w5z3","Type":"NodeParagraph","Properties":{"id":"20240215211231-6l8w5z3","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"在 UE 中，委托机制的原理比较简单，就是在委托类的内部保存了函数指针，需要执行这些委托的时候就传入所需的参数给保存的函数指针，从而调用绑定的函数。但实现上稍显复杂，因为要解决两个问题："},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_3","TextMarkTextContent":"[3]"}]},{"ID":"20240215211231-xhcgj5f","Type":"NodeList","ListData":{},"Properties":{"id":"20240215211231-xhcgj5f","updated":"20240215211232"},"Children":[{"ID":"20240215211231-fm6mw4x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-fm6mw4x","updated":"20240215211231"},"Children":[{"ID":"20240215211231-s2ma5t2","Type":"NodeParagraph","Properties":{"id":"20240215211231-s2ma5t2","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"需要支持具有任意类型以及数量不限的参数列表的函数"}]}]},{"ID":"20240215211231-65p7nuk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-65p7nuk","updated":"20240215211231"},"Children":[{"ID":"20240215211231-130348e","Type":"NodeParagraph","Properties":{"id":"20240215211231-130348e","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"需要支持多种类型函数，如 lambda 匿名函数、C++ 原始成员函数、基于共享指针的成员函数、原始全局函数(包括静态成员函数)、基于 UFunction 的成员函数、基于 UObject 的成员函数"}]}]}]},{"ID":"20240215211231-gzizko2","Type":"NodeParagraph","Properties":{"id":"20240215211231-gzizko2","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"为了支持任意类型使用了 template 模板，支持数量不限的参数则使用了可变参数以及 Tuple 元组。而对于支持多种类型函数，只是尽可能地复用代码的基础上为这些不同的类型函数编写不同的绑定、调用方法。UE 实现上有三个核心的类：模板类 TDelegate、原生类 FDelegateBase 和接口类 IDelegateInstance，TDelegate 提供给用户使用的顶层接口，FDelegateBase 提供不同类型函数实现时通用的底层接口，IDelegateInstance 的各种派生类中完成 TDelegate 中各种顶层接口的实现。"}]},{"ID":"20240215211231-majdpbs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-majdpbs","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"5."},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如何保持新建的UObject对象不被自动GC垃圾回收？"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_4","TextMarkTextContent":"[4]"}]},{"ID":"20240215211231-zehjy18","Type":"NodeParagraph","Properties":{"id":"20240215211231-zehjy18","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"（1）在普通的C++类中新建UObject对象后，使用AddToRoot()函数可以保护对象不被自动回收，移除保护时使用RemoveFromRoot()并把对象指针置为nullptr即可由引擎自动回收；"}]},{"ID":"20240215211231-oumozvt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-oumozvt","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"UMyObject* MyObject=NewObject\u003cUMyObject\u003e();\nMyObject-\u003eAddToRoot();                     //保护对象不被回收\nMyObject-\u003eRemoveFromRoot();\nMyObject=nullptr;                          //交给引擎回收对象\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-f9ztkf0","Type":"NodeParagraph","Properties":{"id":"20240215211231-f9ztkf0","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"（2）如果是在继承自UObject类中新建UObject对象后，使用UPROPERTY宏标记一下对象指针变量也可以保护对象不被自动回收，在该类被销毁时，新建的对象也会被引擎自动回收；"}]},{"ID":"20240215211231-il9ehf3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-il9ehf3","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"UCLASS()\nclass UMyObject : public UObject{\n    GENERATED_BODY()\n    UPROPERTY()\n    class UItemObject* ItemObject;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-znv313j","Type":"NodeParagraph","Properties":{"id":"20240215211231-znv313j","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"（3）使用FStreamableManager加载资源时，将"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"bManageActiveHandle"},{"Type":"NodeText","Data":"​设置为true也可以防止对象被回收；"}]},{"ID":"20240215211231-3yx0v0a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-3yx0v0a","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"FSoftObjectPath AssetPaths(TEXT(\"[资源路径]\"));\nFStreamableManager\u0026 AssetLoader = UAssetManager::GetStreamableManager();\nTSharedPtr\u003cFStreamableHandle\u003e Handle = AssetLoader.RequestSyncLoad(AssetPath, true);//加载资源到内存中，bManageActiveHandle=true\nUObject* Obj = Handle-\u003eGetLoadedAsset();\nHandle-\u003eReleaseHandle();//从内存中释放资源\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-jgvttkp","Type":"NodeParagraph","Properties":{"id":"20240215211231-jgvttkp","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"（4）"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FGCObjectScopeGuard"},{"Type":"NodeText","Data":"​在指定代码区域内保持对象；"}]},{"ID":"20240215211231-vh51y79","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-vh51y79","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"{\n    FGCObjectScopeGuard(UObject* GladOS = NewObject\u003c...\u003e(...));\n    GladOS-\u003eSpawnCell();\n    RunGC();\n    GladOS-\u003eIsStillAlive();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-s0i2pu8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-s0i2pu8","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"6. 三种智能指针"}]},{"ID":"20240215211231-h8es5kq","Type":"NodeList","ListData":{},"Properties":{"id":"20240215211231-h8es5kq","updated":"20240215211232"},"Children":[{"ID":"20240215211231-i345ps9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-i345ps9","updated":"20240215211231"},"Children":[{"ID":"20240215211231-45uk4am","Type":"NodeParagraph","Properties":{"id":"20240215211231-45uk4am","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"共享指针"},{"Type":"NodeText","Data":"（TSharedPtr）允许多个该类型的指针指向同一块内存，采用引用计数器的方式，统计所有指向同一块内存的指针变量的数量，当新的指针变量生命初始化并指向同一块内存，拷贝函数拷贝和赋值操作时引用计数器会自增加，当指针变量生命周期结束调用析构函数时，引用计数器会自减少。引用计数器减少至0时，释放指向的内存。共享引用（TShareRef）和共享指针的区别是共享指针可以为 NULL，而共享引用不能为 NULL 。"}]}]},{"ID":"20240215211231-hltglch","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-hltglch","updated":"20240215211231"},"Children":[{"ID":"20240215211231-lo8e1co","Type":"NodeParagraph","Properties":{"id":"20240215211231-lo8e1co","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"弱指针"},{"Type":"NodeText","Data":"（TWeakPtr"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSharedPtr"},{"Type":"NodeText","Data":"​）主要是为了配合共享指针而引入的一种智能指针，TWeakPtr 没有指针的行为，没有重载间接引用操作符(-\u003e)和解除引用操作符(*)，它可以通过 TSharedPtr 和 TSharedRef 来初始化，但只引用，不计数，不拥有内存的所有权，不会对 TSharedPtr 和 TSharedRef 的共享引用计数器产生影响，也不影响其生命周期，但会在控制块的 WeakReferenceCount 属性中统计弱指针引用数量。"}]}]},{"ID":"20240215211231-9oz8u18","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-9oz8u18","updated":"20240215211231"},"Children":[{"ID":"20240215211231-bu9nana","Type":"NodeParagraph","Properties":{"id":"20240215211231-bu9nana","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"唯一指针"},{"Type":"NodeText","Data":"（TUniquePtr）仅会显式拥有其引用的对象。仅有一个唯一指针指向给定资源，因此唯一指针可转移所有权，但无法共享。复制唯一指针的任何尝试都将导致编译错误。唯一指针超出范围时，其将自动删除其所引用的对象。"}]}]}]},{"ID":"20240215211231-y4tvnsp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-y4tvnsp","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"TSharedPtr\u003cPerson\u003e sp = MakeShared\u003cPerson\u003e();     //创建共享指针\nTSharedRef\u003cPerson\u003e sr = sp.ToSharedRef();         //创建共享引用\nTWeakPtr\u003cPerson\u003e wp = sp;                         //创建弱指针\nint32 use_count = sp.GetSharedReferenceCount();   //共享指针计数\nTUniquePtr\u003cPerson\u003e up = MakeUnique\u003cPerson\u003e();     //创建唯一指针\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-avm5sxf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-avm5sxf","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"7.智能指针的循环引用"}]},{"ID":"20240215211231-zhifi1m","Type":"NodeParagraph","Properties":{"id":"20240215211231-zhifi1m","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"在使用基于引用计数的 TSharedPt r智能指针时，为了防止循环引用带来的内存泄漏问题，可以让引用链上的一方持用弱智能指针 TWeakPtr 。弱智能指针不会影响共享引用计数器。"}]},{"ID":"20240215211231-ctseoyp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-ctseoyp","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"8. 如何使用ParallelFor提高速度"}]},{"ID":"20240215211231-glje8sg","Type":"NodeParagraph","Properties":{"id":"20240215211231-glje8sg","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"ParallelFor允许我们在一分钟内对任何 for 循环进行"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"处理，从而通过在多个线程之间拆分工作来划分执行时间。"}]},{"ID":"20240215211231-3ekt8s2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-3ekt8s2","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"//例1\nParallelFor(num, [\u0026](int32 i) {sum += i; });\n//例2\nFCriticalSection Mutex;\nParallelFor(Input.Num(), [\u0026](int32 Idx){\n    if(Input[Idx] % 5 == 0){\n        Mutex.Lock();\n        Output.Add(Input[Idx]);\n        Mutex.Unlock();\n    }\n});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-8p6jpvv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-8p6jpvv","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"9.TMap的实现原理"}]},{"ID":"20240215211231-u67sj8l","Type":"NodeParagraph","Properties":{"id":"20240215211231-u67sj8l","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"TMap是用基于数组的哈希表实现的，查询效率高，添加、删除效率低，查询的时间复杂度是 �(1) 。TMap的排序采用的快速排序 ， 时间复杂度为 �(����2�) 。"}]},{"ID":"20240215211231-r3dov2w","Type":"NodeTable","TableAligns":[0,0,0,0,0],"Properties":{"colgroup":"||||","id":"20240215211231-r3dov2w","updated":"20240215211232"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th"},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"数据结构"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"查询时间复杂度"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"优点"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"缺点"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"map"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"红黑树"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"O(logn)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"内部自动排序，查询、添加、删除效率相同"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"空间占用较大"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"unordered_map"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"哈希表"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"O(1)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"查询效率高"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"内部元素无序杂乱添加、删除效率低"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"TMap"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"哈希表"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"O(1)"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"查询效率高"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"内部元素无序杂乱添加、删除效率低"}]}]}]},{"ID":"20240215211231-u7y54kf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-u7y54kf","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"10.法线是存储在什么空间"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_5","TextMarkTextContent":"[5]"}]},{"ID":"20240215211231-crf1gei","Type":"NodeParagraph","Properties":{"id":"20240215211231-crf1gei","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"切线空间。对法线做空间变换时，若模型本身做了 XYZ 轴上的非均匀缩放，则法线值会产生偏移，但切线并不会受到影响，所以相较于模型空间，一般常用切线空间存储法线数据。切线空间存储的是相对法线信息，在切线空间中，每个法线方向所在的坐标空间是不一样的，即是表面每点各自的切线空间，这种法线纹理其实存储了每个点在各自的切线空间中的 shading 法线偏移（扰动）方向，如果一个点的法线方向不变，那么在其切线空间中，新的法线方向就是 Z 轴方向。即值为（0,0,1），映射到颜色即（0.5,0.5,1)浅蓝色。"}]},{"ID":"20240215211231-2dg88yt","Type":"NodeParagraph","Properties":{"id":"20240215211231-2dg88yt","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://pic1.zhimg.com/80/v2-40fa646b804af43f7bd450b1113a41ec_720w.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215211231-8qcon0y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-8qcon0y","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"11.虚幻中有哪几种主要线程"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_6","TextMarkTextContent":"[6]"}]},{"ID":"20240215211231-kqy7jcn","Type":"NodeParagraph","Properties":{"id":"20240215211231-kqy7jcn","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"游戏线程（GameThread）"},{"Type":"NodeText","Data":"：承载游戏逻辑、运行流程的工作，也是其它线程的数据发起者。在FEngineLoop::Tick 函数执行每帧逻辑的更新。在引擎启动时会把 GameThread 的线程 id 存储到全局变量GGameThreadId 中，且稍后会设置到 TaskGraph 系统中。"}]},{"ID":"20240215211231-16hc1ye","Type":"NodeParagraph","Properties":{"id":"20240215211231-16hc1ye","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"渲染线程（RenderThread）"},{"Type":"NodeText","Data":"：RenderThread 在 TaskGraph 系统中有一个任务队列，其他线程（主要是GameThread）通过宏 ENQUEUE_RENDER_COMMAND 向该队列中填充任务，RenderThread 则不断从这个队列中取出任务来执行，从而生成与平台无关的 Command List（渲染指令列表）。"}]},{"ID":"20240215211231-t5ojeep","Type":"NodeParagraph","Properties":{"id":"20240215211231-t5ojeep","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"RHI线程（Render Hardware Interface Thread）"},{"Type":"NodeText","Data":"：RenderThread 作为前端（frontend）产生的 Command List 是平台无关的，是抽象的图形 API 调用；而 RHIThread 作为后端（backend）会执行和转换渲染线程的Command List 成为指定图形 API 的调用（称为 Graphical Command），并提交到 GPU 执行。RHI 线程的工作是转换渲染指令到指定图形 API，创建、上传渲染资源到 GPU。"}]},{"ID":"20240215211231-xgt76sk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-xgt76sk","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"12.游戏线程和渲染线程的同步"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_7","TextMarkTextContent":"[7]"}]},{"ID":"20240215211231-ej60a2u","Type":"NodeParagraph","Properties":{"id":"20240215211231-ej60a2u","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"当 GameThread 与 RenderThread 同步时，GameThread 会创建一个 FNullGraphTask 空任务，放到RenderThread 的 TaskGraph 队列中让其执行，在 FRenderCommandFence 的 Wait 函数中，会检查投递给RenderThread 的 CompletionEvent 是否被执行，如果没有执行则调用 GameThreadWaitForTask 函数来阻塞等待。"}]},{"ID":"20240215211231-vv4i3iy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-vv4i3iy","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"13.CharacterMovementComponent 如何更改移动速度"}]},{"ID":"20240215211231-x0kps7x","Type":"NodeParagraph","Properties":{"id":"20240215211231-x0kps7x","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"CharacterMovementComponent 的工作原则是使用加速度驱动速度，通过速度表现具体 Actor 的移动，输入当前加速度的方向和最大加速度的百分比来更改移动速度。"}]},{"ID":"20240215211231-01pq6uv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-01pq6uv","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"14.多线程 Task Graph"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_8","TextMarkTextContent":"[8]"}]},{"ID":"20240215211231-dhoi8rg","Type":"NodeParagraph","Properties":{"id":"20240215211231-dhoi8rg","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"TaskGraph 是 UE 中基于任务的并发机制。可以创建任务在指定类型的线程中执行，同时提供了等待机制，其强大之处在于可以调度一系列有依赖关系的任务，这些任务组成了一个有向无环的任务网络（DAG），并且任务的执行可以分布在不同的线程中。"}]},{"ID":"20240215211231-cvsytpz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215211231-cvsytpz","updated":"20240215211232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y3Bw"},{"Type":"NodeCodeBlockCode","Data":"void ATestTaskGraphActor::CreateTask(FString TaskName, const TArray\u003cTGraphTask\u003cFWorkTask\u003e*\u003e\u0026 Prerequisites,\n  const TArray\u003cTGraphTask\u003cFWorkTask\u003e*\u003e\u0026 ChildTasks){    //FWorkTask为自定义的类\n    FGraphEventArray PrerequisiteEvents;\n    TArray\u003cTGraphTask\u003cFWorkTask\u003e*\u003e ChildEvents;\n    for (auto Item : Prerequisites)\n        PrerequisiteEvents.Add(Item-\u003eGetCompletionEvent());\n    for (auto Item : ChildTasks)\n        ChildEvents.Add(Item);\n    TGraphTask\u003cFWorkTask\u003e::CreateTask(\u0026PrerequisiteEvents).ConstructAndDispatchWhenReady(TaskName, ChildEvents, this);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215211231-z3pkwm4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-z3pkwm4","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"15.后处理之 bloom"}]},{"ID":"20240215211231-xzcmfcd","Type":"NodeParagraph","Properties":{"id":"20240215211231-xzcmfcd","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"泛光（Bloom）是一种现实世界中的光现象，通过它能够以较为适度的渲染性能成本极大地增加渲染图像的真实感。用肉眼观察黑暗背景下非常明亮 的物体时会看到泛光效果。泛光可以用一个高斯模糊来实现。为了提高质量，我们将多个不同半径的高斯模糊组合起来。为了获得更好的性能，我们在大大降低的分辨率下进行很宽范围的模糊。通过改变模糊效果的组合方式，我们可以进行更多的控制，取得更高的质量。为了获得最佳的性能，应该使用高分辨率模糊（小值）来实现较窄的模糊，而主要使用低分辨率模糊 （大值）实现较宽的模糊。"}]},{"ID":"20240215211231-hss5f8b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-hss5f8b","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"16.后处理之轮廓描边"}]},{"ID":"20240215211231-l68b2li","Type":"NodeParagraph","Properties":{"id":"20240215211231-l68b2li","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"方法（1）：对需要描边的物体开启自定义深度缓存，物体所在区域会出现填充的具有深度信息的缓存区，通过后期处理对相邻像素进行采样来执行简单的深度比较，如果邻居有深度信息，但像素没有，就将其着色为轮廓线颜色。"}]},{"ID":"20240215211231-vwv71b0","Type":"NodeParagraph","Properties":{"id":"20240215211231-vwv71b0","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://pic3.zhimg.com/80/v2-de9bd8c21977c67cf819c44d25f9ab1e_720w.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215211231-3fvqjkf","Type":"NodeParagraph","Properties":{"id":"20240215211231-3fvqjkf","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"方法（2）：获取场景法线向量后，通过其中一个做一点点UV偏移，是两个结果做差，颜色值越接近，插值越小，相反越大，而一般需要描边的位置就是向量相差较大的像素点，再用基础颜色加上这个差值就会出现描边效果。"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_9","TextMarkTextContent":"[9]"}]},{"ID":"20240215211231-r22bebd","Type":"NodeParagraph","Properties":{"id":"20240215211231-r22bebd","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://pic1.zhimg.com/80/v2-364ca87b1c1a50466cb2cbd83f922e24_720w.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215211231-oysmuj4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-oysmuj4","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"17.蓝图大量连线为何会比 C++ 慢很多"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_10","TextMarkTextContent":"[10]"}]},{"ID":"20240215211231-x8muues","Type":"NodeParagraph","Properties":{"id":"20240215211231-x8muues","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"蓝图的消耗主要是在节点之间，蓝图连线触发的消耗是一致的，但节点运行的消耗是通过C++ , 节点不同就有所不同 ，所以蓝图中连线很多时会显著降低运行效率。"}]},{"ID":"20240215211231-7b8t7tw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-7b8t7tw","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"18.模型闪烁问题如何解决"}]},{"ID":"20240215211231-k31bhcl","Type":"NodeParagraph","Properties":{"id":"20240215211231-k31bhcl","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"当两个面共面时，会出现闪面现象。使用UE4材质中 Pixel Depth Offset 节点，进行"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"像素"},{"Type":"NodeText","Data":"偏移，达到共面不闪面的效果。"}]},{"ID":"20240215211231-pt4wtrk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-pt4wtrk","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"19.虚幻内使用的光照模型"}]},{"ID":"20240215211231-c5sdvtj","Type":"NodeParagraph","Properties":{"id":"20240215211231-c5sdvtj","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"PBR，基于物理的光照。"}]},{"ID":"20240215211231-yh923hy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-yh923hy","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"20.slate中常用的控件"}]},{"ID":"20240215211231-4vkh8sj","Type":"NodeParagraph","Properties":{"id":"20240215211231-4vkh8sj","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"SHorizontalBox：水平框"}]},{"ID":"20240215211231-gttf808","Type":"NodeParagraph","Properties":{"id":"20240215211231-gttf808","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"SVerticalBox：垂直框"}]},{"ID":"20240215211231-x1dpn86","Type":"NodeParagraph","Properties":{"id":"20240215211231-x1dpn86","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"SUniformGridPanel：统一网格面板，均匀地垂直和水平分发子控件的面板"}]},{"ID":"20240215211231-j0ui6b3","Type":"NodeParagraph","Properties":{"id":"20240215211231-j0ui6b3","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"SWrapBox：包围盒，水平排列控件的盒"}]},{"ID":"20240215211231-wwe4qgk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-wwe4qgk","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"21.反射的作用"}]},{"ID":"20240215211231-1kg4i8c","Type":"NodeParagraph","Properties":{"id":"20240215211231-1kg4i8c","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"反射实现来支持引擎的动态功能，如垃圾回收、序列化、网络复制和蓝图/C++通信等。"}]},{"ID":"20240215211231-vxqd6ll","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-vxqd6ll","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"22.结构体中是否可以使用 UFUNCTION()"}]},{"ID":"20240215211231-t8zls00","Type":"NodeParagraph","Properties":{"id":"20240215211231-t8zls00","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"不可以。反射系统不支持结构体中的函数，即使在 C++ 类和结构中实际上也具有与类相同的功能，UE4约定将结构限制为仅包含数据结构，这种做法实际上赋予结构更多的存在感。"}]},{"ID":"20240215211231-sdrosed","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-sdrosed","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"23. UE 中垃圾回收的原理"}]},{"ID":"20240215211231-bw1howv","Type":"NodeParagraph","Properties":{"id":"20240215211231-bw1howv","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"UE4 采用了标记-清扫的垃圾回收方式，是一种经典的垃圾回收方式。一次垃圾回收分为两个阶段。第一阶段从一个根集合出发，遍历所有可达对象，遍历完成后就能标记出可达对象和不可达对象了，这个阶段会在一帧内完成。第二阶段会渐进式的清理这些不可达对象，因为不可达的对象将永远不能被访问到，所以可以分帧清理它们，避免一下子清理很多 UObject，比如 map 卸载时，发生明显的卡顿。"}]},{"ID":"20240215211231-q4guu4y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-q4guu4y","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"24. UE 中有哪几种容器"}]},{"ID":"20240215211231-o6fw23i","Type":"NodeParagraph","Properties":{"id":"20240215211231-o6fw23i","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"TArray"},{"Type":"NodeText","Data":"：是 UE4 中最常用的容器类，负责同类型其他对象（称为\"元素\"）序列的所有权和组织。由于TArray是一个序列，其元素的排序定义明确，其函数用于确定性地操纵此类对象及其顺序。"}]},{"ID":"20240215211231-2xg3nju","Type":"NodeParagraph","Properties":{"id":"20240215211231-2xg3nju","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"TMap"},{"Type":"NodeText","Data":"：继"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TArray"},{"Type":"NodeText","Data":"​之后，UE4 中最常用的容器是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TMap"},{"Type":"NodeText","Data":"​。TMap主要由两个类型定义（一个键类型和一个值类型），以关联对的形式存储在映射中。与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​类似，它们的结构均基于对键进行散列运算。但与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​不同的是，此容器将数据存储为键值对（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TPair\u0026lt;KeyType, ValueType\u0026gt;"},{"Type":"NodeText","Data":"​），只将键用于存储和获取。"}]},{"ID":"20240215211231-s8i238i","Type":"NodeParagraph","Properties":{"id":"20240215211231-s8i238i","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"：是一种快速容器类，（通常）用于在排序不重要的情况下存储唯一元素。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​类似于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TMap"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TMultiMap"},{"Type":"NodeText","Data":"​，但有一个重要区别："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​是通过对元素求值的可覆盖函数，使用数据值本身作为键，而不是将数据值与独立的键相关联。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​可以非常快速地添加、查找和删除元素（恒定时间）。默认情况下，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TSet"},{"Type":"NodeText","Data":"​不支持重复的键，但使用模板参数可激活此行为。"}]},{"ID":"20240215211231-flm2gh3","Type":"NodeParagraph","Properties":{"id":"20240215211231-flm2gh3","updated":"20240215211232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"TList"},{"Type":"NodeText","Data":"：简单的单链表模板。"}]},{"ID":"20240215211231-nhisvdd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240215211231-nhisvdd","updated":"20240215211231"},"Children":[{"Type":"NodeText","Data":"25.gameplay 的框架"},{"Type":"NodeTextMark","TextMarkType":"sup a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/579078025#ref_11","TextMarkTextContent":"[11]"}]},{"ID":"20240215211231-rnoqvf2","Type":"NodeParagraph","Properties":{"id":"20240215211231-rnoqvf2","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"UE 的游戏世界构成层级为："}]},{"ID":"20240215211231-91rtvrb","Type":"NodeList","ListData":{},"Properties":{"id":"20240215211231-91rtvrb","updated":"20240215211232"},"Children":[{"ID":"20240215211231-789qt3t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-789qt3t","updated":"20240215211231"},"Children":[{"ID":"20240215211231-uauya28","Type":"NodeParagraph","Properties":{"id":"20240215211231-uauya28","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GameInstance"},{"Type":"NodeText","Data":"：游戏实例，由 GameEngine 创造出来，主要用于管理世界切换，UI的加载，控制台命令和额外的逻辑，初始化/关闭引擎，修改GameMode，在线会话管理等一些全局性的内容。"}]}]},{"ID":"20240215211231-qbjf1mn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-qbjf1mn","updated":"20240215211231"},"Children":[{"ID":"20240215211231-couvtq0","Type":"NodeParagraph","Properties":{"id":"20240215211231-couvtq0","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"World"},{"Type":"NodeText","Data":"：游戏世界，常用结构体 FWorldContext 记录了游戏世界的各种信息使用在游戏世界切换等功能。"}]}]},{"ID":"20240215211231-oi68qyi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-oi68qyi","updated":"20240215211231"},"Children":[{"ID":"20240215211231-elrbnk1","Type":"NodeParagraph","Properties":{"id":"20240215211231-elrbnk1","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Level"},{"Type":"NodeText","Data":"：一个游戏世界，可以分成多个 Level，比如将游戏场景分成一个 Level，灯光分成一个 Level 等等，这样有利于美术师进行场景搭建。关卡也分为 Persistence Level 和 Streaming Level，Persistence Level 是建立我们世界的主Level，Streaming Level 是作为部分内容的 Level 按照我们定义的规则加载到 Persistence Level 里。"}]}]},{"ID":"20240215211231-psy0hkn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-psy0hkn","updated":"20240215211231"},"Children":[{"ID":"20240215211231-hv88zz1","Type":"NodeParagraph","Properties":{"id":"20240215211231-hv88zz1","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GameMode"},{"Type":"NodeText","Data":"：定义游戏规则，存在于每个 World/Level 中，并且只在服务器上，通过GameState来传递信息。"}]}]},{"ID":"20240215211231-khpm0sr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-khpm0sr","updated":"20240215211231"},"Children":[{"ID":"20240215211231-8tf5slb","Type":"NodeParagraph","Properties":{"id":"20240215211231-8tf5slb","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Actor"},{"Type":"NodeText","Data":"：所有能放到游戏场景中的对象的基类都是 AActor。"}]}]},{"ID":"20240215211231-myj4o1d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240215211231-myj4o1d","updated":"20240215211231"},"Children":[{"ID":"20240215211231-2yrl2cy","Type":"NodeParagraph","Properties":{"id":"20240215211231-2yrl2cy","updated":"20240215211231"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Component"},{"Type":"NodeText","Data":"：表现 Actor 的各种构成部分，UE 中的 Component 类能够附加到 Actor 上。"}]}]}]},{"ID":"20240215211231-4k8vly5","Type":"NodeParagraph","Properties":{"id":"20240215211231-4k8vly5","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"Gameplay 的 3C 概念，就是 Character、Camera、Control。Character 表现游戏世界中的玩家，拥有游戏世界中最复杂的行为，对于程序员来说，要负责处理角色的移动，动画，皮肤（装备）等。Camera 处理游戏视角，表现游戏世界，第一人称，第三人称，FOV，VFX，后处理，抖动等。Control 处理输入（来自鼠标键盘，手柄，模拟器等，以及输入模式例如单击、按住、双击），匹配输入逻辑（按键映射），处理回应输入的逻辑，UI交互，以及物理模拟，AI驱动等。"}]},{"ID":"20240215211231-aa4r0o7","Type":"NodeParagraph","Properties":{"id":"20240215211231-aa4r0o7","updated":"20240215211232"},"Children":[{"Type":"NodeText","Data":"26.Unreal 中使用的光线追踪方法有哪些？"}]}]}