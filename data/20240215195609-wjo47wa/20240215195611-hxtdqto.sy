{"ID":"20240215195611-hxtdqto","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240215195611-hxtdqto","title":"“三次握手，四次挥手”你真的懂吗？","updated":"20240215210014"},"Children":[{"ID":"20240215195642-d8i9pne","Type":"NodeParagraph","Properties":{"id":"20240215195642-d8i9pne","updated":"20240215195653"},"Children":[{"Type":"NodeText","Data":"原文链接："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/53374516","TextMarkTextContent":"“三次握手，四次挥手”你真的懂吗？ - 知乎 (zhihu.com)"}]},{"ID":"20240215195642-bm9hnnq","Type":"NodeThematicBreak","Properties":{"id":"20240215195642-bm9hnnq"}},{"ID":"20240215195626-4iprqco","Type":"NodeParagraph","Properties":{"id":"20240215195626-4iprqco","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"记得刚毕业找工作面试的时候，经常会被问到：你知道“3次握手，4次挥手”吗？这时候我会“胸有成竹”地“背诵”前期准备好的“答案”，第一次怎么怎么，第二次……答完就没有下文了，面试官貌似也没有深入下去的意思，深入下去我也不懂，皆大欢喜！"}]},{"ID":"20240215195626-8lis9l2","Type":"NodeParagraph","Properties":{"id":"20240215195626-8lis9l2","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"作为程序员，要有“刨根问底”的精神。知其然，更要知其所以然。这篇文章希望能抽丝剥茧，还原背后的原理。"}]},{"ID":"20240215195626-i3mwzjs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-i3mwzjs","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"什么是“3次握手，4次挥手”"}]},{"ID":"20240215195626-d2mafnz","Type":"NodeParagraph","Properties":{"id":"20240215195626-d2mafnz","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。"}]},{"ID":"20240215195626-flzzrfx","Type":"NodeParagraph","Properties":{"id":"20240215195626-flzzrfx","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"TCP可以看成是一种字节流，它会处理IP层或以下的层的丢包、重复以及错误问题。在连接的建立过程中，双方需要交换一些连接的参数。这些参数可以放在TCP头部。"}]},{"ID":"20240215195626-5ts2lsu","Type":"NodeParagraph","Properties":{"id":"20240215195626-5ts2lsu","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接。采用4次挥手来关闭一个连接。"}]},{"ID":"20240215195626-91f5ubz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-91f5ubz","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"TCP服务模型"}]},{"ID":"20240215195626-jt6303l","Type":"NodeParagraph","Properties":{"id":"20240215195626-jt6303l","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"在了解了建立连接、关闭连接的“三次握手和四次挥手”后，我们再来看下TCP相关的东西。"}]},{"ID":"20240215195626-bdd4r93","Type":"NodeParagraph","Properties":{"id":"20240215195626-bdd4r93","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"一个TCP连接由一个4元组构成，分别是两个IP地址和两个端口号。一个TCP连接通常分为三个阶段：启动、数据传输、退出（关闭）。"}]},{"ID":"20240215195626-x9pj1q7","Type":"NodeParagraph","Properties":{"id":"20240215195626-x9pj1q7","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当TCP接收到另一端的数据时，它会发送一个确认，但这个确认不会立即发送，一般会延迟一会儿。ACK是累积的，一个确认字节号N的ACK表示所有直到N的字节（不包括N）已经成功被接收了。这样的好处是如果一个ACK丢失，很可能后续的ACK就足以确认前面的报文段了。"}]},{"ID":"20240215195626-fp02f99","Type":"NodeParagraph","Properties":{"id":"20240215195626-fp02f99","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"一个完整的TCP连接是双向和对称的，数据可以在两个方向上平等地流动。给上层应用程序提供一种"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"双工服务"},{"Type":"NodeText","Data":"​。一旦建立了一个连接，这个连接的一个方向上的每个TCP报文段都包含了相反方向上的报文段的一个ACK。"}]},{"ID":"20240215195626-y4y9auc","Type":"NodeParagraph","Properties":{"id":"20240215195626-y4y9auc","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"序列号的作用是使得一个TCP接收端可丢弃重复的报文段，记录以杂乱次序到达的报文段。因为TCP使用IP来传输报文段，而IP不提供重复消除或者保证次序正确的功能。另一方面，TCP是一个字节流协议，绝不会以杂乱的次序给上层程序发送数据。因此TCP接收端会被迫先保持大序列号的数据不交给应用程序，直到缺失的小序列号的报文段被填满。"}]},{"ID":"20240215195626-n1jqgp9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-n1jqgp9","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"TCP头部"}]},{"ID":"20240215195626-ag4qclj","Type":"NodeParagraph","Properties":{"id":"20240215195626-ag4qclj","updated":"20240215200050"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-8f5725f163d7f6390a75f3a2d337bc1c_720w-20240215200020-4n3rh3a.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-7pjzg44","Type":"NodeParagraph","Properties":{"id":"20240215195626-7pjzg44","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"源端口和目的端口在TCP层确定双方进程，序列号表示的是报文段数据中的第一个字节号，ACK表示确认号，该确认号的发送方期待接收的下一个序列号，即最后被成功接收的数据字节序列号加1，这个字段只有在ACK位被启用的时候才有效。"}]},{"ID":"20240215195626-70lkokh","Type":"NodeParagraph","Properties":{"id":"20240215195626-70lkokh","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当新建一个连接时，从客户端发送到服务端的第一个报文段的SYN位被启用，这称为SYN报文段，这时序列号字段包含了在本次连接的这个方向上要使用的第一个序列号，即初始序列号"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ISN"},{"Type":"NodeText","Data":"​，之后发送的数据是ISN加1，因此SYN位字段会"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"消耗"},{"Type":"NodeText","Data":"​一个序列号，这意味着使用重传进行可靠传输。而不消耗序列号的ACK则不是。"}]},{"ID":"20240215195626-sphbk1l","Type":"NodeParagraph","Properties":{"id":"20240215195626-sphbk1l","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"头部长度（图中的数据偏移）以32位字为单位，也就是以4bytes为单位，它只有4位，最大为15，因此头部最大长度为60字节，而其最小为5，也就是头部最小为20字节（可变选项为空）。"}]},{"ID":"20240215195626-q1mdy5n","Type":"NodeParagraph","Properties":{"id":"20240215195626-q1mdy5n","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"ACK —— 确认，使得确认号有效。 RST —— 重置连接（经常看到的reset by peer）就是此字段搞的鬼。 SYN —— 用于初如化一个连接的序列号。 FIN —— 该报文段的发送方已经结束向对方发送数据。"}]},{"ID":"20240215195626-zjc3k77","Type":"NodeParagraph","Properties":{"id":"20240215195626-zjc3k77","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当一个连接被建立或被终止时，交换的报文段只包含TCP头部，而没有数据。"}]},{"ID":"20240215195626-487rjly","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-487rjly","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"状态转换"}]},{"ID":"20240215195626-ef93218","Type":"NodeParagraph","Properties":{"id":"20240215195626-ef93218","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"三次握手和四次挥手的状态转换如下图。"}]},{"ID":"20240215195626-lmljmjv","Type":"NodeParagraph","Properties":{"id":"20240215195626-lmljmjv","updated":"20240215200054"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-e8aaab48ff996e5cd8a5b39dc450bd6a_720w-20240215200020-rj9aw4w.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-xzvp4ta","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-xzvp4ta","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"为什么要“三次握手，四次挥手”"}]},{"ID":"20240215195626-1qu3iuc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-1qu3iuc","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"三次握手"}]},{"ID":"20240215195626-9q19r5g","Type":"NodeParagraph","Properties":{"id":"20240215195626-9q19r5g","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"换个易于理解的视角来看为什么要3次握手。"}]},{"ID":"20240215195626-7ja5hco","Type":"NodeParagraph","Properties":{"id":"20240215195626-7ja5hco","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"客户端和服务端通信前要进行连接，“3次握手”的作用就是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"双方都能明确自己和对方的收、发能力是正常的"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240215195626-gspl1z2","Type":"NodeParagraph","Properties":{"id":"20240215195626-gspl1z2","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"第一次握手"},{"Type":"NodeText","Data":"​：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。"}]},{"ID":"20240215195626-wowpb7g","Type":"NodeParagraph","Properties":{"id":"20240215195626-wowpb7g","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"第二次握手"},{"Type":"NodeText","Data":"​：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。 从客户端的视角来看，我接到了服务端发送过来的响应数据包，说明服务端接收到了我在第一次握手时发送的网络包，并且成功发送了响应数据包，这就说明，服务端的接收、发送能力正常。而另一方面，我收到了服务端的响应数据包，说明我第一次发送的网络包成功到达服务端，这样，我自己的发送和接收能力也是正常的。"}]},{"ID":"20240215195626-nty7jk4","Type":"NodeParagraph","Properties":{"id":"20240215195626-nty7jk4","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"第三次握手"},{"Type":"NodeText","Data":"​：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力，服务端的发送、接收能力是正常的。 第一、二次握手后，服务端并不知道客户端的接收能力以及自己的发送能力是否正常。而在第三次握手时，服务端收到了客户端对第二次握手作的回应。从服务端的角度，我在第二次握手时的响应数据发送出去了，客户端接收到了。所以，我的发送能力是正常的。而客户端的接收能力也是正常的。"}]},{"ID":"20240215195626-9oqqkz1","Type":"NodeParagraph","Properties":{"id":"20240215195626-9oqqkz1","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"经历了上面的三次握手过程，客户端和服务端都确认了自己的接收、发送能力是正常的。之后就可以正常通信了。"}]},{"ID":"20240215195626-nebk0lc","Type":"NodeParagraph","Properties":{"id":"20240215195626-nebk0lc","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"每次都是接收到数据包的一方可以得到一些结论，发送的一方其实没有任何头绪。我虽然有发包的动作，但是我怎么知道我有没有发出去，而对方有没有接收到呢？"}]},{"ID":"20240215195626-jz4c6ai","Type":"NodeParagraph","Properties":{"id":"20240215195626-jz4c6ai","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"而从上面的过程可以看到，最少是需要三次握手过程的。两次达不到让双方都得出自己、对方的接收、发送能力都正常的结论。其实每次收到网络包的一方至少是可以得到：对方的发送、我方的接收是正常的。而每一步都是有关联的，下一次的“响应”是由于第一次的“请求”触发，因此每次握手其实是可以得到额外的结论的。比如第三次握手时，服务端收到数据包，表明看服务端只能得到客户端的发送能力、服务端的接收能力是正常的，但是结合第二次，说明服务端在第二次发送的响应包，客户端接收到了，并且作出了响应，从而得到额外的结论：客户端的接收、服务端的发送是正常的。"}]},{"ID":"20240215195626-uoesuzv","Type":"NodeParagraph","Properties":{"id":"20240215195626-uoesuzv","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"用表格总结一下："}]},{"ID":"20240215195626-f1qje2q","Type":"NodeParagraph","Properties":{"id":"20240215195626-f1qje2q","updated":"20240215205620"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-0e041d18bf194379f89222fdedb07d55_720w-20240215200020-rj7scls.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-m68d3g1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-m68d3g1","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"四次挥手"}]},{"ID":"20240215195626-77avcwe","Type":"NodeParagraph","Properties":{"id":"20240215195626-77avcwe","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，等到发送完了所有的数据后，会发送一个FIN段来关闭此方向上的连接。接收方发送ACK确认关闭连接。注意，接收到FIN报文的一方只能回复一个ACK, 它是无法马上返回对方一个FIN报文段的，因为结束数据传输的“指令”是上层应用层给出的，我只是一个“搬运工”，我无法了解"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"“上层的意志”"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240215195626-8dv4mdg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-8dv4mdg","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"“三次握手，四次挥手”怎么完成？"}]},{"ID":"20240215195626-g1rboy8","Type":"NodeParagraph","Properties":{"id":"20240215195626-g1rboy8","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"其实3次握手的目的并不只是让通信双方都了解到一个连接正在建立，还在于利用数据包的选项来传输特殊的信息，交换初始序列号ISN。"}]},{"ID":"20240215195626-rmphty7","Type":"NodeParagraph","Properties":{"id":"20240215195626-rmphty7","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"3次握手是指发送了3个报文段，4次挥手是指发送了4个报文段。注意，SYN和FIN段都是会利用重传进行可靠传输的。"}]},{"ID":"20240215195626-o1sxb26","Type":"NodeParagraph","Properties":{"id":"20240215195626-o1sxb26","updated":"20240215200031"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-07c065a0321f887ae69e269d8dda9f43_720w-20240215200020-7zrmzfm.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-j1gjjxy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-j1gjjxy","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"三次握手"}]},{"ID":"20240215195626-n5qws1p","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240215195626-n5qws1p","updated":"20240215195627"},"Children":[{"ID":"20240215195626-apaj4hl","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240215195626-apaj4hl","updated":"20240215195626"},"Children":[{"ID":"20240215195626-44oewjn","Type":"NodeParagraph","Properties":{"id":"20240215195626-44oewjn","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"客户端发送一个SYN段，并指明客户端的初始序列号，即ISN(c)."}]}]},{"ID":"20240215195626-mafzo3j","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240215195626-mafzo3j","updated":"20240215195626"},"Children":[{"ID":"20240215195626-dqv2wx2","Type":"NodeParagraph","Properties":{"id":"20240215195626-dqv2wx2","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"服务端发送自己的SYN段作为应答，同样指明自己的ISN(s)。为了确认客户端的SYN，将ISN(c)+1作为ACK数值。这样，每发送一个SYN，序列号就会加1. 如果有丢失的情况，则会重传。"}]}]},{"ID":"20240215195626-vx590bh","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240215195626-vx590bh","updated":"20240215195626"},"Children":[{"ID":"20240215195626-pafx7k0","Type":"NodeParagraph","Properties":{"id":"20240215195626-pafx7k0","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"为了确认服务器端的SYN，客户端将ISN(s)+1作为返回的ACK数值。"}]}]}]},{"ID":"20240215195626-fzd8sgl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-fzd8sgl","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"四次挥手"}]},{"ID":"20240215195626-63peucq","Type":"NodeParagraph","Properties":{"id":"20240215195626-63peucq","updated":"20240215200034"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-629f51f6f535ebd7683f944707b21d1e_720w-20240215200021-i264esd.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-z8m3p1a","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240215195626-z8m3p1a","updated":"20240215210014"},"Children":[{"ID":"20240215195626-wu1lk4u","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240215195626-wu1lk4u","updated":"20240215195626"},"Children":[{"ID":"20240215195626-94bpico","Type":"NodeParagraph","Properties":{"id":"20240215195626-94bpico","updated":"20240215205948"},"Children":[{"Type":"NodeText","Data":"客户端发送一个FIN段，并包含一个希望接收者看到的自己当前的序列号K. 同时还包含一个ACK表示确认对方最近一次发过来的数据"}]}]},{"ID":"20240215205956-yf09vk5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240215205956-yf09vk5"},"Children":[{"ID":"20240215205956-47inz0v","Type":"NodeParagraph","Properties":{"id":"20240215205956-47inz0v","updated":"20240215210009"},"Children":[{"Type":"NodeText","Data":"服务端将K值加1作为ACK序号值，表明收到了上一个包。这时上层的应用程序会被告知另一端发起了关闭操作，通常这将引起应用程序发起自己的关闭操作。 "}]}]},{"ID":"20240215210009-gauoc6n","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240215210009-gauoc6n"},"Children":[{"ID":"20240215210009-hqznx8u","Type":"NodeParagraph","Properties":{"id":"20240215210009-hqznx8u"},"Children":[{"Type":"NodeText","Data":"服务端发起自己的FIN段，ACK=K+1, Seq=L "}]}]},{"ID":"20240215210011-40hv6n8","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240215210011-40hv6n8","updated":"20240215210014"},"Children":[{"ID":"20240215210011-ubdvn8x","Type":"NodeParagraph","Properties":{"id":"20240215210011-ubdvn8x","updated":"20240215210014"},"Children":[{"Type":"NodeText","Data":"客户端确认。ACK=L+1"}]}]}]},{"ID":"20240215195626-yuoiv5x","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-yuoiv5x","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"}]},{"ID":"20240215195626-oixq3r9","Type":"NodeParagraph","Properties":{"id":"20240215195626-oixq3r9","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方ACK和FIN一般都会分开发送。"}]},{"ID":"20240215195626-nndlp8a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-nndlp8a","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"“三次握手，四次挥手”进阶"}]},{"ID":"20240215195626-k649tdp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-k649tdp","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"ISN"}]},{"ID":"20240215195626-h9jt8ea","Type":"NodeParagraph","Properties":{"id":"20240215195626-h9jt8ea","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。"}]},{"ID":"20240215195626-eoom89f","Type":"NodeParagraph","Properties":{"id":"20240215195626-eoom89f","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"如果ISN是固定的，攻击者很容易猜出后续的确认号。"}]},{"ID":"20240215195626-buea6rk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-buea6rk","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"ISN = M + F(localhost, localport, remotehost, remoteport)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-qdkselu","Type":"NodeParagraph","Properties":{"id":"20240215195626-qdkselu","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"M是一个计时器，每隔4毫秒加1。 F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出。"}]},{"ID":"20240215195626-aai12kg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-aai12kg","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"序列号回绕"}]},{"ID":"20240215195626-361pekq","Type":"NodeParagraph","Properties":{"id":"20240215195626-361pekq","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"因为ISN是随机的，所以序列号容易就会超过2^31-1. 而tcp对于丢包和乱序等问题的判断都是依赖于序列号大小比较的。此时就出现了所谓的tcp序列号回绕（sequence wraparound）问题。怎么解决？"}]},{"ID":"20240215195626-w36gnr3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-w36gnr3","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw=="},{"Type":"NodeCodeBlockCode","Data":"/*\n* The next routines deal with comparing 32 bit unsigned ints\n* and worry about wraparound (automatic with unsigned arithmetic).\n*/\nstatic inline int before(__u32 seq1, __u32 seq2)\n{\n    return (__s32)(seq1-seq2) \u003c 0;\n}\n\n#define after(seq2, seq1) before(seq1, seq2)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-wf019s0","Type":"NodeParagraph","Properties":{"id":"20240215195626-wf019s0","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"上述代码是内核中的解决回绕问题代码。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"s32是有符号整型的意思，而"},{"Type":"NodeText","Data":"u32则是无符号整型。序列号发生回绕后，序列号变小，相减之后，把结果变成有符号数了，因此结果成了负数。"}]},{"ID":"20240215195626-8w0fkny","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-8w0fkny","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"假设seq1=255， seq2=1（发生了回绕）。\nseq1 = 1111 1111 seq2 = 0000 0001\n我们希望比较结果是\n seq1 - seq2=\n 1111 1111\n-0000 0001\n-----------\n 1111 1110\n\n由于我们将结果转化成了有符号数，由于最高位是1，因此结果是一个负数，负数的绝对值为\n 0000 0001 + 1 = 0000 0010 = 2\n\n因此seq1 - seq2 \u003c 0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-oq7cf04","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-oq7cf04","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"syn flood攻击"}]},{"ID":"20240215195626-9sbfxtn","Type":"NodeParagraph","Properties":{"id":"20240215195626-9sbfxtn","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。syn flood属于Dos攻击的一种。"}]},{"ID":"20240215195626-vrlp25n","Type":"NodeParagraph","Properties":{"id":"20240215195626-vrlp25n","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"如果恶意的向某个服务器端口发送大量的SYN包，则可以使服务器打开大量的半开连接，分配TCB（Transmission Control Block）, 从而消耗大量的服务器资源，同时也使得正常的连接请求无法被相应。当开放了一个TCP端口后，该端口就处于Listening状态，不停地监视发到该端口的Syn报文，一 旦接收到Client发来的Syn报文，就需要为该请求分配一个TCB，通常一个TCB至少需要280个字节，在某些操作系统中TCB甚至需要1300个字节，并返回一个SYN ACK命令，立即转为SYN-RECEIVED即半开连接状态。系统会为此耗尽资源。"}]},{"ID":"20240215195626-kfuw3i9","Type":"NodeParagraph","Properties":{"id":"20240215195626-kfuw3i9","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"常见的防攻击方法有："}]},{"ID":"20240215195626-aof5yuc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-aof5yuc","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"无效连接的监视释放"}]},{"ID":"20240215195626-l6arwnr","Type":"NodeParagraph","Properties":{"id":"20240215195626-l6arwnr","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"监视系统的半开连接和不活动连接，当达到一定阈值时拆除这些连接，从而释放系统资源。这种方法对于所有的连接一视同仁，而且由于SYN Flood造成的半开连接数量很大，正常连接请求也被淹没在其中被这种方式误释放掉，因此这种方法属于入门级的SYN Flood方法。"}]},{"ID":"20240215195626-35hj6nt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-35hj6nt","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"延缓TCB分配方法"}]},{"ID":"20240215195626-j7zcoou","Type":"NodeParagraph","Properties":{"id":"20240215195626-j7zcoou","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"消耗服务器资源主要是因为当SYN数据报文一到达，系统立即分配TCB，从而占用了资源。而SYN Flood由于很难建立起正常连接，因此，当正常连接建立起来后再分配TCB则可以有效地减轻服务器资源的消耗。常见的方法是使用Syn Cache和Syn Cookie技术。"}]},{"ID":"20240215195626-4sfpe9h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-4sfpe9h","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"Syn Cache技术"}]},{"ID":"20240215195626-iw5gk95","Type":"NodeParagraph","Properties":{"id":"20240215195626-iw5gk95","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"系统在收到一个SYN报文时，在一个专用HASH表中保存这种半连接信息，直到收到正确的回应ACK报文再分配TCB。这个开销远小于TCB的开销。当然还需要保存序列号。"}]},{"ID":"20240215195626-a5b8cqh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-a5b8cqh","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"Syn Cookie技术"}]},{"ID":"20240215195626-xgad0z1","Type":"NodeParagraph","Properties":{"id":"20240215195626-xgad0z1","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"Syn Cookie技术则完全不使用任何存储资源，这种方法比较巧妙，它使用一种特殊的算法生成Sequence Number，这种算法考虑到了对方的IP、端口、己方IP、端口的固定信息，以及对方无法知道而己方比较固定的一些信息，如MSS(Maximum Segment Size，最大报文段大小，指的是TCP报文的最大数据报长度，其中不包括TCP首部长度。)、时间等，在收到对方 的ACK报文后，重新计算一遍，看其是否与对方回应报文中的（Sequence Number-1）相同，从而决定是否分配TCB资源。"}]},{"ID":"20240215195626-loz45cc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-loz45cc","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"使用SYN Proxy防火墙"}]},{"ID":"20240215195626-auccq94","Type":"NodeParagraph","Properties":{"id":"20240215195626-auccq94","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"一种方式是防止墙dqywb连接的有效性后，防火墙才会向内部服务器发起SYN请求。防火墙代服务器发出的SYN ACK包使用的序列号为c, 而真正的服务器回应的序列号为c', 这样，在每个数据报文经过防火墙的时候进行序列号的修改。另一种方式是防火墙确定了连接的安全后，会发出一个safe reset命令，client会进行重新连接，这时出现的syn报文会直接放行。这样不需要修改序列号了。但是，client需要发起两次握手过程，因此建立连接的时间将会延长。"}]},{"ID":"20240215195626-p2oyw0g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-p2oyw0g","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"连接队列"}]},{"ID":"20240215195626-bjcf5zm","Type":"NodeParagraph","Properties":{"id":"20240215195626-bjcf5zm","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"在外部请求到达时，被服务程序最终感知到前，连接可能处于SYN_RCVD状态或是ESTABLISHED状态，但还未被应用程序接受。"}]},{"ID":"20240215195626-5a35mum","Type":"NodeParagraph","Properties":{"id":"20240215195626-5a35mum","updated":"20240215200040"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-c4688fba5db30b31c913f549108c9735_720w-20240215200021-w9v4ggz.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240215195626-57bt9y1","Type":"NodeParagraph","Properties":{"id":"20240215195626-57bt9y1","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"对应地，服务器端也会维护两种队列，处于SYN_RCVD状态的半连接队列，而处于ESTABLISHED状态但仍未被应用程序accept的为全连接队列。如果这两个队列满了之后，就会出现各种丢包的情形。"}]},{"ID":"20240215195626-ylxy0op","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-ylxy0op","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"查看是否有连接溢出\nnetstat -s | grep LISTEN\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-wwfpwio","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-wwfpwio","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"半连接队列满了"}]},{"ID":"20240215195626-vr08pee","Type":"NodeParagraph","Properties":{"id":"20240215195626-vr08pee","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"在三次握手协议中，服务器维护一个半连接队列，该队列为每个客户端的SYN包开设一个条目(服务端在接收到SYN包的时候，就已经创建了request_sock结构，存储在半连接队列中)，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。"}]},{"ID":"20240215195626-yhqbdbo","Type":"NodeBlockquote","Properties":{"id":"20240215195626-yhqbdbo","updated":"20240215195627"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240215195626-tqsbj9t","Type":"NodeParagraph","Properties":{"id":"20240215195626-tqsbj9t","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"目前，Linux下默认会进行5次重发SYN-ACK包，重试的间隔时间从1s开始，下次的重试间隔时间是前一次的双倍，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s, 总共31s, 称为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"指数退避"},{"Type":"NodeText","Data":"​，第5次发出后还要等32s才知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 63s, TCP才会把断开这个连接。由于，SYN超时需要63秒，那么就给攻击者一个攻击服务器的机会，攻击者在短时间内发送大量的SYN包给Server(俗称SYN flood攻击)，用于耗尽Server的SYN队列。对于应对SYN 过多的问题，linux提供了几个TCP参数：tcp_syncookies、tcp_synack_retries、tcp_max_syn_backlog、tcp_abort_on_overflow 来调整应对。"}]}]},{"ID":"20240215195626-a51qqa4","Type":"NodeParagraph","Properties":{"id":"20240215195626-a51qqa4","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-f998ee97330a3a258ad617ea10257c4c_720w-20240215200021-o6iian3.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-hs89xbi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-hs89xbi","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"全连接队列满"}]},{"ID":"20240215195626-o27rda0","Type":"NodeParagraph","Properties":{"id":"20240215195626-o27rda0","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当第三次握手时，当server接收到ACK包之后，会进入一个新的叫 accept 的队列。"}]},{"ID":"20240215195626-6s4totq","Type":"NodeParagraph","Properties":{"id":"20240215195626-6s4totq","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当accept队列满了之后，即使client继续向server发送ACK的包，也会不被响应，此时ListenOverflows+1，同时server通过tcp_abort_on_overflow来决定如何返回，0表示直接丢弃该ACK，1表示发送RST通知client；相应的，client则会分别返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"read timeout"},{"Type":"NodeText","Data":"​ 或者 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"connection reset by peer"},{"Type":"NodeText","Data":"​。另外，tcp_abort_on_overflow是0的话，server过一段时间再次发送syn+ack给client（也就是重新走握手的第二步），如果client超时等待比较短，就很容易异常了。而客户端收到多个 SYN ACK 包，则会认为之前的 ACK 丢包了。于是促使客户端再次发送 ACK ，在 accept队列有空闲的时候最终完成连接。若 accept队列始终满员，则最终客户端收到 RST 包（此时服务端发送syn+ack的次数超出了tcp_synack_retries）。"}]},{"ID":"20240215195626-gl3f2ui","Type":"NodeParagraph","Properties":{"id":"20240215195626-gl3f2ui","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"服务端仅仅只是创建一个定时器，以固定间隔重传syn和ack到服务端"}]},{"ID":"20240215195626-g4iffum","Type":"NodeParagraph","Properties":{"id":"20240215195626-g4iffum","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-df71dbb7c5f6743eca7fba07d1a0b869_720w-20240215200021-yq0ebnf.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-pv1vwp9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-pv1vwp9","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"命令"}]},{"ID":"20240215195626-g1ab8t1","Type":"NodeParagraph","Properties":{"id":"20240215195626-g1ab8t1","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"netstat -s命令"}]},{"ID":"20240215195626-zjpndif","Type":"NodeBlockquote","Properties":{"id":"20240215195626-zjpndif","updated":"20240215195627"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240215195626-nn53it4","Type":"NodeParagraph","Properties":{"id":"20240215195626-nn53it4","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"[root@server ~]# netstat -s | egrep \"listen|LISTEN\" 667399 times the listen queue of a socket overflowed 667399 SYNs to LISTEN sockets ignored\n比如上面看到的 667399 times ，表示全连接队列溢出的次数，隔几秒钟执行下，如果这个数字一直在增加的话肯定全连接队列偶尔满了。\n[root@server ~]# netstat -s | grep TCPBacklogDrop 查看 Accept queue 是否有溢出"}]}]},{"ID":"20240215195626-9n1rnp9","Type":"NodeParagraph","Properties":{"id":"20240215195626-9n1rnp9","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"ss命令"}]},{"ID":"20240215195626-qzahg5w","Type":"NodeBlockquote","Properties":{"id":"20240215195626-qzahg5w","updated":"20240215195627"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240215195626-uf64up1","Type":"NodeParagraph","Properties":{"id":"20240215195626-uf64up1","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"[root@server ~]# ss -lnt State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 *:6379 "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":":"},{"Type":"NodeText","Data":" LISTEN 0 128 *:22 "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":":"},{"Type":"NodeText","Data":" 如果State是listen状态，Send-Q 表示第三列的listen端口上的全连接队列最大为50，第一列Recv-Q为全连接队列当前使用了多少。 非 LISTEN 状态中 Recv-Q 表示 receive queue 中的 bytes 数量；Send-Q 表示 send queue 中的 bytes 数值。"}]}]},{"ID":"20240215195626-13n1pku","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-13n1pku","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"小结"}]},{"ID":"20240215195626-5c7g89m","Type":"NodeParagraph","Properties":{"id":"20240215195626-5c7g89m","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"当外部连接请求到来时，TCP模块会首先查看max_syn_backlog，如果处于SYN_RCVD状态的连接数目超过这一阈值，进入的连接会被拒绝。根据tcp_abort_on_overflow字段来决定是直接丢弃，还是直接reset."}]},{"ID":"20240215195626-2c37t1u","Type":"NodeParagraph","Properties":{"id":"20240215195626-2c37t1u","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"从服务端来说，三次握手中，第一步server接受到client的syn后，把相关信息放到半连接队列中，同时回复syn+ack给client. 第三步当收到客户端的ack, 将连接加入到全连接队列。"}]},{"ID":"20240215195626-dvemqxb","Type":"NodeParagraph","Properties":{"id":"20240215195626-dvemqxb","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"一般，全连接队列比较小，会先满，此时半连接队列还没满。如果这时收到syn报文，则会进入半连接队列，没有问题。但是如果收到了三次握手中的第3步(ACK)，则会根据tcp_abort_on_overflow字段来决定是直接丢弃，还是直接reset.此时，客户端发送了ACK, 那么客户端认为三次握手完成，它认为服务端已经准备好了接收数据的准备。但此时服务端可能因为全连接队列满了而无法将连接放入，会重新发送第2步的syn+ack, 如果这时有数据到来，服务器TCP模块会将数据存入队列中。一段时间后，client端没收到回复，超时，连接异常，client会主动关闭连接。"}]},{"ID":"20240215195626-k365lci","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-k365lci","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"“三次握手，四次挥手”redis实例分析"}]},{"ID":"20240215195626-i9vhu1u","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240215195626-i9vhu1u","updated":"20240215195627"},"Children":[{"ID":"20240215195626-tarufg2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240215195626-tarufg2","updated":"20240215195626"},"Children":[{"ID":"20240215195626-cyy8x8y","Type":"NodeParagraph","Properties":{"id":"20240215195626-cyy8x8y","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"我在dev机器上部署redis服务，端口号为6379,"}]}]},{"ID":"20240215195626-a6jg570","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240215195626-a6jg570","updated":"20240215195626"},"Children":[{"ID":"20240215195626-dxq2wor","Type":"NodeParagraph","Properties":{"id":"20240215195626-dxq2wor","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"通过tcpdump工具获取数据包，使用如下命令"}]}]}]},{"ID":"20240215195626-y4kik8x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-y4kik8x","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"tcpdump -w /tmp/a.cap port 6379 -s0\n-w把数据写入文件，-s0设置每个数据包的大小默认为68字节，如果用-S 0则会抓到完整数据包\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-jf9b4e5","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240215195626-jf9b4e5","updated":"20240215195627"},"Children":[{"ID":"20240215195626-ky7koc0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240215195626-ky7koc0","updated":"20240215195626"},"Children":[{"ID":"20240215195626-vhrlqrj","Type":"NodeParagraph","Properties":{"id":"20240215195626-vhrlqrj","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"在dev2机器上用redis-cli访问dev:6379, 发送一个ping, 得到回复pong"}]}]},{"ID":"20240215195626-31yv6mp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240215195626-31yv6mp","updated":"20240215195626"},"Children":[{"ID":"20240215195626-5o9ou1x","Type":"NodeParagraph","Properties":{"id":"20240215195626-5o9ou1x","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"停止抓包，用tcpdump读取捕获到的数据包"}]}]}]},{"ID":"20240215195626-j6ug3o1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-j6ug3o1","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"tcpdump -r /tmp/a.cap -n -nn -A -x| vim -\n（-x 以16进制形式展示，便于后面分析）\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-ikt3zn7","Type":"NodeParagraph","Properties":{"id":"20240215195626-ikt3zn7","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"共收到了7个包。"}]},{"ID":"20240215195626-eryfu5z","Type":"NodeParagraph","Properties":{"id":"20240215195626-eryfu5z","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"抓到的是IP数据包，IP数据包分为IP头部和IP数据部分，IP数据部分是TCP头部加TCP数据部分。"}]},{"ID":"20240215195626-0gqtxf6","Type":"NodeParagraph","Properties":{"id":"20240215195626-0gqtxf6","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"IP的数据格式为："}]},{"ID":"20240215195626-x9eqwm4","Type":"NodeParagraph","Properties":{"id":"20240215195626-x9eqwm4","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-a8702bdb6e9cf9fd29e824ac07542067_720w-20240215200021-s0cm4uv.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-dzd970b","Type":"NodeParagraph","Properties":{"id":"20240215195626-dzd970b","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"它由固定长度20B+可变长度构成。"}]},{"ID":"20240215195626-7gm4xc7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-7gm4xc7","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"10:55:45.662077 IP dev2.39070 \u003e dev.6379: Flags [S], seq 4133153791, win 29200, options [mss 1460,sackOK,TS val 2959270704 ecr 0,nop,wscale 7], length 0\n        0x0000:  4500 003c 08cf 4000 3606 14a5 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ebff 0000 0000\n        0x0020:  a002 7210 872f 0000 0204 05b4 0402 080a\n        0x0030:  b062 e330 0000 0000 0103 0307\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-60th44c","Type":"NodeParagraph","Properties":{"id":"20240215195626-60th44c","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"对着IP头部格式，来拆解数据包的具体含义。"}]},{"ID":"20240215195626-0po9izg","Type":"NodeParagraph","Properties":{"id":"20240215195626-0po9izg","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-1b33f99c890277f54fd15370635860ee_720w-20240215200021-gsri3da.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-3jxn1tg","Type":"NodeParagraph","Properties":{"id":"20240215195626-3jxn1tg","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"剩余的数据部分即为TCP协议相关的。TCP也是20B固定长度+可变长度部分。"}]},{"ID":"20240215195626-smzxtv0","Type":"NodeParagraph","Properties":{"id":"20240215195626-smzxtv0","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-4949f0578dbde508f35ef4aef9a932b7_720w-20240215200021-pyqq120.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-uuuvxbc","Type":"NodeParagraph","Properties":{"id":"20240215195626-uuuvxbc","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"可变长度部分，协议如下："}]},{"ID":"20240215195626-e2txip8","Type":"NodeParagraph","Properties":{"id":"20240215195626-e2txip8","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/net-img-v2-82bc4c9a7d5ae823c09502c687d3b6e0_720w-20240215200021-oqjooyy.webp"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-elku6wl","Type":"NodeParagraph","Properties":{"id":"20240215195626-elku6wl","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"这样第一个包分析完了。dev2向dev发送SYN请求。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"也就是三次握手中的第一次了。"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SYN seq(c)=4133153791"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-s6gv48w","Type":"NodeParagraph","Properties":{"id":"20240215195626-s6gv48w","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"第二个包，dev响应连接，ack=4133153792. 表明dev下次准备接收这个序号的包，用于tcp字节注的顺序控制。dev（也就是server端）的初始序号为seq=4264776963, syn=1. "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SYN ack=seq(c)+1 seq(s)=4264776963"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240215195626-cgrxu5p","Type":"NodeParagraph","Properties":{"id":"20240215195626-cgrxu5p","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"第三个包，client包确认，这里使用了相对值应答。seq=4133153792, 等于第二个包的ack. ack=4264776964. "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ack=seq(s)+1, seq=seq(c)+1"},{"Type":"NodeText","Data":"​ 至此，三次握手完成。接下来就是发送ping和pong的数据了。"}]},{"ID":"20240215195626-nq80p07","Type":"NodeParagraph","Properties":{"id":"20240215195626-nq80p07","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"接着第四个包。"}]},{"ID":"20240215195626-tiewc72","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-tiewc72","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"10:55:48.090073 IP dev2.39070 \u003e dev.6379: Flags [P.], seq 1:15, ack 1, win 229, options [nop,nop,TS val 2959273132 ecr 3132256230], length 14\n        0x0000:  4500 0042 08d1 4000 3606 149d 0ab3 b561\n        0x0010:  0a60 5cd4 989e 18eb f65a ec00 fe33 5504\n        0x0020:  8018 00e5 4b5f 0000 0101 080a b062 ecac\n        0x0030:  bab2 6fe6 2a31 0d0a 2434 0d0a 7069 6e67\n        0x0040:  0d0a\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-d7m7x5s","Type":"NodeParagraph","Properties":{"id":"20240215195626-d7m7x5s","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"tcp首部长度为32B, 可选长度为12B. IP报文的总长度为66B, 首部长度为20B, 因此TCP数据部分长度为14B. seq=0xf65a ec00=4133153792 ACK, PSH. 数据部分为2a31 0d0a 2434 0d0a 7069 6e67 0d0a"}]},{"ID":"20240215195626-u9l48xi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240215195626-u9l48xi","updated":"20240215195627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"0x2a31         -\u003e *1\n0x0d0a         -\u003e \\r\\n\n0x2434         -\u003e $4\n0x0d0a         -\u003e \\r\\n\n0x7069 0x6e67  -\u003e ping\n0x0d0a         -\u003e \\r\\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240215195626-booj54a","Type":"NodeParagraph","Properties":{"id":"20240215195626-booj54a","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"dev2向dev发送了ping数据，第四个包完毕。"}]},{"ID":"20240215195626-l572ffr","Type":"NodeParagraph","Properties":{"id":"20240215195626-l572ffr","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"第五个包，dev2向dev发送ack响应。 序列号为0xfe33 5504=4264776964, ack确认号为0xf65a ec0e=4133153806=(4133153792+14)."}]},{"ID":"20240215195626-3x7apup","Type":"NodeParagraph","Properties":{"id":"20240215195626-3x7apup","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"第六个包，dev向dev2响应pong消息。序列号fe33 5504，确认号f65a ec0e, TCP头部可选长度为12B, IP数据报总长度为59B, 首部长度为20B, 因此TCP数据长度为7B. 数据部分2b50 4f4e 470d 0a, 翻译过来就是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"+PONG\\r\\n"},{"Type":"NodeText","Data":"​."}]},{"ID":"20240215195626-irpmfii","Type":"NodeParagraph","Properties":{"id":"20240215195626-irpmfii","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"至此，Redis客户端和Server端的三次握手过程分析完毕。"}]},{"ID":"20240215195626-2gxzn4j","Type":"NodeParagraph","Properties":{"id":"20240215195626-2gxzn4j","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"欢迎一起交流~~"}]},{"ID":"20240215195626-7ez0utw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240215195626-7ez0utw","updated":"20240215195626"},"Children":[{"Type":"NodeText","Data":"参考"}]},{"ID":"20240215195626-ons0xj9","Type":"NodeParagraph","Properties":{"id":"20240215195626-ons0xj9","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【redis】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000015044878","TextMarkTextContent":"https://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000015044878","TextMarkTextContent":"segmentfault.com/a/1190"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000015044878","TextMarkTextContent":"000015044878"}]},{"ID":"20240215195626-ozhy5xo","Type":"NodeParagraph","Properties":{"id":"20240215195626-ozhy5xo","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【tcp option】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//blog.csdn.net/wdscq1234/article/details/52423272","TextMarkTextContent":"https://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//blog.csdn.net/wdscq1234/article/details/52423272","TextMarkTextContent":"blog.csdn.net/wdscq1234"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//blog.csdn.net/wdscq1234/article/details/52423272","TextMarkTextContent":"/article/details/52423272"}]},{"ID":"20240215195626-ponvpzj","Type":"NodeParagraph","Properties":{"id":"20240215195626-ponvpzj","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【滑动窗口】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/32255109","TextMarkTextContent":"https://www."},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://www.zhihu.com/question/32255109","TextMarkTextContent":"zhihu.com/question/3225"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/32255109","TextMarkTextContent":"5109"}]},{"ID":"20240215195626-ds2a9ot","Type":"NodeParagraph","Properties":{"id":"20240215195626-ds2a9ot","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【全连接队列】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//jm.taobao.org/2017/05/25/525-1/","TextMarkTextContent":"http://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//jm.taobao.org/2017/05/25/525-1/","TextMarkTextContent":"jm.taobao.org/2017/05/2"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//jm.taobao.org/2017/05/25/525-1/","TextMarkTextContent":"5/525-1/"}]},{"ID":"20240215195626-3vs7qip","Type":"NodeParagraph","Properties":{"id":"20240215195626-3vs7qip","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【client fooling】 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//github.com/torvalds/linux/commit/5ea8ea2cb7f1d0db15762c9b0bb9e7330425a071","TextMarkTextContent":"https://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//github.com/torvalds/linux/commit/5ea8ea2cb7f1d0db15762c9b0bb9e7330425a071","TextMarkTextContent":"github.com/torvalds/lin"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//github.com/torvalds/linux/commit/5ea8ea2cb7f1d0db15762c9b0bb9e7330425a071","TextMarkTextContent":"ux/commit/5ea8ea2cb7f1d0db15762c9b0bb9e7330425a071"}]},{"ID":"20240215195626-ew446t2","Type":"NodeParagraph","Properties":{"id":"20240215195626-ew446t2","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【backlog RECV_Q】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//blog.51cto.com/59090939/1947443","TextMarkTextContent":"http://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//blog.51cto.com/59090939/1947443","TextMarkTextContent":"blog.51cto.com/59090939"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=http%3A//blog.51cto.com/59090939/1947443","TextMarkTextContent":"/1947443"}]},{"ID":"20240215195626-n98ykyy","Type":"NodeParagraph","Properties":{"id":"20240215195626-n98ykyy","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【定时器】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/menghuanbiao/p/5212131.html","TextMarkTextContent":"https://www."},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/menghuanbiao/p/5212131.html","TextMarkTextContent":"cnblogs.com/menghuanbia"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/menghuanbiao/p/5212131.html","TextMarkTextContent":"o/p/5212131.html"}]},{"ID":"20240215195626-nhjzx9f","Type":"NodeParagraph","Properties":{"id":"20240215195626-nhjzx9f","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【队列图示】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.itcodemonkey.com/article/5834.html","TextMarkTextContent":"https://www."},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.itcodemonkey.com/article/5834.html","TextMarkTextContent":"itcodemonkey.com/articl"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.itcodemonkey.com/article/5834.html","TextMarkTextContent":"e/5834.html"}]},{"ID":"20240215195626-14ysjyo","Type":"NodeParagraph","Properties":{"id":"20240215195626-14ysjyo","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【tcp flood攻击】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/hubavyn/p/4477883.html","TextMarkTextContent":"https://www."},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/hubavyn/p/4477883.html","TextMarkTextContent":"cnblogs.com/hubavyn/p/4"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/hubavyn/p/4477883.html","TextMarkTextContent":"477883.html"}]},{"ID":"20240215195626-pj4tguq","Type":"NodeParagraph","Properties":{"id":"20240215195626-pj4tguq","updated":"20240215195627"},"Children":[{"Type":"NodeText","Data":"【MSS MTU】"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//blog.csdn.net/LoseInVain/article/details/5369426","TextMarkTextContent":"https://"},{"Type":"NodeTextMark","TextMarkType":"a strong","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//blog.csdn.net/LoseInVain/article/details/5369426","TextMarkTextContent":"blog.csdn.net/LoseInVai"}]}]}