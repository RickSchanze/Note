{"ID":"20240306234035-4k805q2","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240306234035-4k805q2","title":"Chapter3 图形处理单元(GPU)","updated":"20240308235724"},"Children":[{"ID":"20240307233650-ckse10t","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240307233650-ckse10t","updated":"20240307233659"},"Children":[{"Type":"NodeText","Data":"3.2 GPU管线概述"}]},{"ID":"20240307225529-v34uxsm","Type":"NodeParagraph","Properties":{"id":"20240307225529-v34uxsm","updated":"20240307233659"},"Children":[{"Type":"NodeText","Data":"概念上的⼏何处理阶段、光栅化阶段和像素处理阶段，GPU在硬件上实现了这些阶段，并划分为了几个不同的硬件阶段。"}]},{"ID":"20240307225800-n9i48s6","Type":"NodeParagraph","Properties":{"id":"20240307225800-n9i48s6","updated":"20240307233659"},"Children":[{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"display: block;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240307225800-pjp5ww6.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"display: block;\"}"}]},{"ID":"20240307225804-hxiy8rd","Type":"NodeParagraph","Properties":{"id":"20240307225804-hxiy8rd","updated":"20240307233659"},"Children":[{"Type":"NodeText","Data":"顶点着色器是一个完全可编程阶段，用于实现渲染管线中的几何处理阶段。"}]},{"ID":"20240307225840-6ub85u7","Type":"NodeParagraph","Properties":{"id":"20240307225840-6ub85u7","updated":"20240307233659"},"Children":[{"Type":"NodeText","Data":"几何着色器也是一个完全可编程的阶段，可以对图元（点、线或三角形）的顶点进行操作。"}]},{"ID":"20240307225926-79agj10","Type":"NodeParagraph","Properties":{"id":"20240307225926-79agj10","updated":"20240307233659"},"Children":[{"Type":"NodeText","Data":"合并阶段尽管不是可编程 的，但是它是⾼度可配置的，合并阶段实现了渲染管线的合并功能，负责维护颜色缓冲、Z-Buffer、混合、模板缓冲以及其他任何与输出相关的缓冲区。"}]},{"ID":"20240307230041-lh9tqmm","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240307230041-lh9tqmm","updated":"20240307230052"},"Children":[{"Type":"NodeText","Data":"3.3 可编程着色器阶段"}]},{"ID":"20240307230052-oev1ipx","Type":"NodeParagraph","Properties":{"id":"20240307230052-oev1ipx","updated":"20240307230310"},"Children":[{"Type":"NodeText","Data":"一次draw call会调用图形API来魂之一组图元，渲染管线也会相应执行对应着色器。"}]},{"ID":"20240307230310-gksla70","Type":"NodeParagraph","Properties":{"id":"20240307230310-gksla70","updated":"20240307230319"},"Children":[{"Type":"NodeText","Data":"每个可编程的着⾊器阶段都包含两种类型的输⼊：统⼀输⼊（uniform input），它是指在⼀次 draw call 中不会发⽣改变的常量；可变输⼊（varying input），来⾃三⻆形的顶点或者光栅化的数据。"}]},{"ID":"20240307230320-32op7x0","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240307230320-32op7x0","updated":"20240307231845"},"Children":[{"Type":"NodeText","Data":"3.5 顶点着色器"}]},{"ID":"20240307231934-qvcssf6","Type":"NodeParagraph","Properties":{"id":"20240307231934-qvcssf6","updated":"20240307232022"},"Children":[{"Type":"NodeText","Data":"顶点着⾊器是功能流⽔线中的第⼀个阶段。在进⼊这个阶段之前，就已经存在⼀ 些数据计算了。这在 DirectX 中叫做"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"输⼊汇编器（input assembler）"},{"Type":"NodeText","Data":"，⼏个数据流被编织在⼀起，形成了顶点集合和图元集合，并向下发送给管线。"}]},{"ID":"20240307232022-93iuq90","Type":"NodeParagraph","Properties":{"id":"20240307232022-93iuq90","updated":"20240307232037"},"Children":[{"Type":"NodeText","Data":"在输⼊汇编器中还⽀持 实例化（instancing），"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这允许⼀个物体可以在每个实例中，使⽤不同的数据的来进 ⾏绘制，所有这些绘制都只对应⼀次 draw call"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240307232038-utem43e","Type":"NodeParagraph","Properties":{"id":"20240307232038-utem43e","updated":"20240307232219"},"Children":[{"Type":"NodeText","Data":"⼀个三⻆形⽹格由⼀组顶点构成，每个顶点都对应物体表⾯上的⼀个特定位置。除了位置之外，每个顶点上还具有⼀些其他可选的属性，例如颜⾊和纹理坐标。"}]},{"ID":"20240307232242-q7wd6oy","Type":"NodeParagraph","Properties":{"id":"20240307232242-q7wd6oy","updated":"20240307232309"},"Children":[{"Type":"NodeText","Data":"顶点着⾊器是处理这些三⻆形的第⼀个阶段。但是⽤于描述三⻆形是如何组成的数据 （点和点之间的关系）对于顶点着⾊器⽽⾔是不可⽤的，顶点着⾊器"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"提供了⼀种⽤于修改、创建或者忽略 三⻆形顶点数据的⽅法"},{"Type":"NodeText","Data":"，这些数据可以是颜⾊、法线、纹理坐标和位置等。通常"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"顶点着⾊器程序会将顶点从模型空间变换到⻬次裁剪空间中"},{"Type":"NodeText","Data":"（章节 4.7），在最极端的情 况下，顶点着⾊器也必须要输出顶点的位置。"}]},{"ID":"20240307232443-w1nmvax","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240307232443-w1nmvax","updated":"20240307232447"},"Children":[{"Type":"NodeText","Data":"3.6 曲面细分阶段"}]},{"ID":"20240307232448-45v44y9","Type":"NodeParagraph","Properties":{"id":"20240307232448-45v44y9","updated":"20240307232455"},"Children":[{"Type":"NodeText","Data":"曲面细分阶段允许我们绘制曲面，GPU的任务就是将每个曲面描述都转换成一组三角形。"}]},{"ID":"20240307232505-ikbfjvs","Type":"NodeParagraph","Properties":{"id":"20240307232505-ikbfjvs","updated":"20240307232508"},"Children":[{"Type":"NodeText","Data":"曲面细分的好处："}]},{"ID":"20240307232509-ahx6ztk","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240307232509-ahx6ztk","updated":"20240307232618"},"Children":[{"ID":"20240307232510-ychjdpq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240307232510-ychjdpq","updated":"20240307232510"},"Children":[{"ID":"20240307232510-fp9h1mc","Type":"NodeParagraph","Properties":{"id":"20240307232510-fp9h1mc","updated":"20240307232537"},"Children":[{"Type":"NodeText","Data":"节省内存，因为描述一个曲面往往比提供三角形网格更加紧凑"}]}]},{"ID":"20240307232546-p8ssvii","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240307232546-p8ssvii","updated":"20240307232618"},"Children":[{"ID":"20240307232546-kgpvdy9","Type":"NodeParagraph","Properties":{"id":"20240307232546-kgpvdy9","updated":"20240307232618"},"Children":[{"Type":"NodeText","Data":"对于一个给定的相机视角，曲面细分可以生产适当的三角形数量，使其可以被高效渲染。"}]}]}]},{"ID":"20240307232630-yv0zean","Type":"NodeParagraph","Properties":{"id":"20240307232630-yv0zean","updated":"20240307233146"},"Children":[{"Type":"NodeText","Data":"曲面细分又分为三个子阶段："}]},{"ID":"20240307233147-fzim5mf","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240307233147-fzim5mf","updated":"20240307234443"},"Children":[{"ID":"20240307233148-wp1rxqk","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240307233148-wp1rxqk","updated":"20240307233148"},"Children":[{"ID":"20240307233148-iqwxwx4","Type":"NodeParagraph","Properties":{"id":"20240307233148-iqwxwx4","updated":"20240307233327"},"Children":[{"Type":"NodeText","Data":"壳着色器（hull shader）（OpenGL称为细分控制着色器（tessellation contrl shader））"}]},{"ID":"20240307233448-77dlvl5","Type":"NodeParagraph","Properties":{"id":"20240307233448-77dlvl5","updated":"20240307233530"},"Children":[{"Type":"NodeText","Data":"壳着色器的输入是一个特殊的面片（patch）图元，它包含了若干个定义细分表面、Bezier面片、以及其他类型曲线元素的控制点。"}]},{"ID":"20240307233537-n4aca1a","Type":"NodeParagraph","Properties":{"id":"20240307233537-n4aca1a","updated":"20240307233542"},"Children":[{"Type":"NodeText","Data":"功能有："}]},{"ID":"20240307233542-279p1nb","Type":"NodeList","ListData":{},"Properties":{"id":"20240307233542-279p1nb","updated":"20240307233544"},"Children":[{"ID":"20240307233544-yxuqybc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240307233544-yxuqybc","updated":"20240307233544"},"Children":[{"ID":"20240307233544-0znzg99","Type":"NodeParagraph","Properties":{"id":"20240307233544-0znzg99","updated":"20240307233603"},"Children":[{"Type":"NodeText","Data":"告诉细分器需要生产多少个三角形，以及如何对它们进行配置"}]}]},{"ID":"20240307233604-1ur938a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240307233604-1ur938a"},"Children":[{"ID":"20240307233604-ppbx4s9","Type":"NodeParagraph","Properties":{"id":"20240307233604-ppbx4s9","updated":"20240307233623"},"Children":[{"Type":"NodeText","Data":"对每个控制点进行处理"}]}]}]},{"ID":"20240307233807-lfusg0v","Type":"NodeParagraph","Properties":{"id":"20240307233807-lfusg0v","updated":"20240307233810"},"Children":[{"Type":"NodeText","Data":"壳着色器会将处理好的控"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"制"},{"Type":"NodeText","Data":"点和曲面细分相关控制数据发送给域着色器。"}]}]},{"ID":"20240307233200-i15wblm","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240307233200-i15wblm","updated":"20240307234443"},"Children":[{"ID":"20240307233200-v6q8c0t","Type":"NodeParagraph","Properties":{"id":"20240307233200-v6q8c0t","updated":"20240307233436"},"Children":[{"Type":"NodeText","Data":"曲面细分器（tessellator）（OpenGL称为图元生成器（primitive generator））"}]},{"ID":"20240307233824-0ypeax1","Type":"NodeParagraph","Properties":{"id":"20240307233824-0ypeax1","updated":"20240307234021"},"Children":[{"Type":"NodeText","Data":"这是一个固定功能的阶段，且只应用于曲面细分着色器。"}]},{"ID":"20240307234028-pwios8x","Type":"NodeParagraph","Properties":{"id":"20240307234028-pwios8x","updated":"20240307234255"},"Children":[{"Type":"NodeText","Data":"它的任务是添加新的顶点，并发送给域着色器进行处理。"}]},{"ID":"20240307234418-uidb8kg","Type":"NodeBlockquote","Properties":{"id":"20240307234418-uidb8kg","updated":"20240307234443"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240307234434-40dlm9i","Type":"NodeParagraph","Properties":{"id":"20240307234434-40dlm9i","updated":"20240307234443"},"Children":[{"Type":"NodeText","Data":"壳着色器发送给曲面细分器的另一个重要参数是曲面细分因子（tessellation factor，在OpenGL中叫做曲面细分等级，tessellation level），它有两种类型，分别是内边缘和外边缘。内边缘因子有两个，它决定了在三角形或者四边形内部进行细分的次数；外边缘因子决定了每个外部边缘被分割的次数。"}]}]}]}]},{"ID":"20240307233210-bnij35h","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240307233210-bnij35h","updated":"20240307234519"},"Children":[{"ID":"20240307234519-iehrbal","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240307234519-iehrbal","updated":"20240307234519"},"Children":[{"ID":"20240307234519-zpe42an","Type":"NodeParagraph","Properties":{"id":"20240307234519-zpe42an","updated":"20240307234519"},"Children":[{"Type":"NodeText","Data":"域着色器（domain shader）（OpenGL成为细分评估着色器（tessellation evaluation shader））"}]}]}]},{"ID":"20240307234223-v5ek0ex","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240307234223-v5ek0ex","updated":"20240307234751"},"Children":[{"Type":"NodeText","Data":"3.7 几何着色器"}]},{"ID":"20240307234751-rm9wkod","Type":"NodeParagraph","Properties":{"id":"20240307234751-rm9wkod","updated":"20240307234824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"几何着色器可以将一种图元转换为另一种图元"},{"Type":"NodeText","Data":"，这是曲面细分着色器所无法实现的。"}]},{"ID":"20240307234803-151nnx4","Type":"NodeParagraph","Properties":{"id":"20240307234803-151nnx4","updated":"20240307234952"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"几何着色器的输入是一个独立物体和与其相关联的顶点"},{"Type":"NodeText","Data":"。这些物体通常由一个条状三角形、一个线段或者仅仅是一个点组成，其他扩展的图元也可以在几何着色器中进行定义和处理"}]},{"ID":"20240307234936-te7tzn2","Type":"NodeParagraph","Properties":{"id":"20240307234936-te7tzn2","updated":"20240307234954"},"Children":[{"Type":"NodeText","Data":"\t几何着色器会对这些输入的图元进行处理，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"会输出0个或者更多数量的顶点"},{"Type":"NodeText","Data":"，这些顶点可以是点、折线或者条状三角形。"}]},{"ID":"20240307234947-v55lfhp","Type":"NodeParagraph","Properties":{"id":"20240307234947-v55lfhp","updated":"20240307235018"},"Children":[{"Type":"NodeText","Data":"\t几何着色器的设计目的是对输入的顶点数据进行修改，或者是创建有限数量的副本。可以用于高效的创建级联阴影贴图（cascaded shadow map，CSM），从而生成高质量的阴影。"}]},{"ID":"20240307235112-l97s920","Type":"NodeParagraph","Properties":{"id":"20240307235112-l97s920","updated":"20240307235113"},"Children":[{"Type":"NodeText","Data":"\t几何着色器最多可以输出四个数据流（stream），每个数据流都可以被发送到渲染管线的下一阶段进行处理，所有这些数据流都可以选择性地发送到流式输出的渲染目标中。"}]},{"ID":"20240307235113-h9meios","Type":"NodeParagraph","Properties":{"id":"20240307235113-h9meios","updated":"20240307235139"},"Children":[{"Type":"NodeText","Data":"\t"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"几何着色器会保证按照图元的输入顺序来输出图元"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这个排序会对执行性能产生影响"},{"Type":"NodeText","Data":"，因为如果有很多个着色器核心并行执行的话，那么为了保证图元的输出顺序与输入顺序相同，则必须要将所有执行后的结果保存下来并进行排序。"}]},{"ID":"20240307235136-se6zdrd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240307235136-se6zdrd","updated":"20240307235217"},"Children":[{"Type":"NodeText","Data":"3.7.1 流式输出"}]},{"ID":"20240307235217-qie0p8x","Type":"NodeParagraph","Properties":{"id":"20240307235217-qie0p8x","updated":"20240307235320"},"Children":[{"Type":"NodeText","Data":"\t"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"流式输出"},{"Type":"NodeText","Data":"（stream output）的想法是在Shader Model 4.0中引入的，在顶点被顶点着色器处理完成之后（这里还可以选择曲面细分和几何着色器），这些数据除了被发送到光栅化阶段之外，还可以通过一个流（即一个有序数组）来进行输出。"}]},{"ID":"20240307235335-lbypdk0","Type":"NodeParagraph","Properties":{"id":"20240307235335-lbypdk0","updated":"20240307235340"},"Children":[{"Type":"NodeText","Data":"\t可以完全关闭光栅化阶段，然后将管线作为一个纯粹的、非图形的流处理器。这些处理过的数据可以通过流式输出从管线中返回，从而允许对其进行迭代处理。这类操作在模拟流动的水体，或者其他粒子特效的时候十分有用。"}]},{"ID":"20240307235347-d2ugequ","Type":"NodeParagraph","Properties":{"id":"20240307235347-d2ugequ","updated":"20240307235617"},"Children":[{"Type":"NodeText","Data":"\t还可以用于对模型进行蒙皮操作，然后让这些顶点数据可以重复使用。"}]},{"ID":"20240308234134-k9nshh9","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240308234134-k9nshh9","updated":"20240308234211"},"Children":[{"Type":"NodeText","Data":"3.8 像素着色器"}]},{"ID":"20240308234211-hxt2u5g","Type":"NodeParagraph","Properties":{"id":"20240308234211-hxt2u5g","updated":"20240308234308"},"Children":[{"Type":"NodeText","Data":"\t三角形中部分与像素重叠、或者完全与像素重叠的部分被叫做一个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"片元"},{"Type":"NodeText","Data":"（fragment）。"}]},{"ID":"20240308234309-i37s7az","Type":"NodeParagraph","Properties":{"id":"20240308234309-i37s7az","updated":"20240308234415"},"Children":[{"Type":"NodeText","Data":"\t"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"顶点着色器程序的输出，在经过三角形（或者线段）插值之后，会成为像素着色器程序的输入。"}]},{"ID":"20240308234415-kfhb1co","Type":"NodeParagraph","Properties":{"id":"20240308234415-kfhb1co","updated":"20240308234459"},"Children":[{"Type":"NodeText","Data":"\t着色器可以计算并输出一个片元的颜色值。它也可以"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"生成一个不透明度或者选择性修改片元的深度值"},{"Type":"NodeText","Data":"，在后续的合并阶段中，这些数值可以用于修改存储在像素上的值。"}]},{"ID":"20240308234500-lncs59f","Type":"NodeParagraph","Properties":{"id":"20240308234500-lncs59f","updated":"20240308234538"},"Children":[{"Type":"NodeText","Data":"\t光栅化阶段生成的深度值也可以在像素着色器中进行修改。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"模板缓冲（stencil buffer）通常是不可修改的，而是会直接将其发送给合并阶段（但在DirectX 11.3中，也允许着色器对模板缓冲进行修改。）"}]},{"ID":"20240308234539-iryb554","Type":"NodeParagraph","Properties":{"id":"20240308234539-iryb554","updated":"20240308234546"},"Children":[{"Type":"NodeText","Data":"\t像素着色器还有一个独有能力，那就是将一个输入片元丢弃，也就是说不生成任何输出。"}]},{"ID":"20240308234548-iqlzttd","Type":"NodeParagraph","Properties":{"id":"20240308234548-iqlzttd","updated":"20240308234752"},"Children":[{"Type":"NodeText","Data":"\t像素着色器可以执行的指令数量大大增加，这种增长催生了"},{"Type":"NodeTextMark","TextMarkType":"strong em","TextMarkTextContent":"多重渲染目标"},{"Type":"NodeText","Data":"（multiple render target，MRT）的想法。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"像素着色器并不会直接将生成的结果输出到颜色缓冲和z-buffer中，而是会为每个片元生成多组数值，并存储到不同的缓冲区中，每个缓冲区被称为一个渲染目标（render target，RT）。"}]},{"ID":"20240308234757-jp4uuhx","Type":"NodeParagraph","Properties":{"id":"20240308234757-jp4uuhx","updated":"20240308234813"},"Children":[{"Type":"NodeText","Data":"\tMRT的这种能力催生了一种不同类型的渲染管线，它被称作"},{"Type":"NodeTextMark","TextMarkType":"strong em","TextMarkTextContent":"延迟着色"},{"Type":"NodeText","Data":"（deferred shading），在延迟着色中，可见性计算和着色计算是在两个单独的pass中完成的。第一个pass计算并存储了每个像素上的物体位置和材质信息，并在之后的pass中来高效计算光照以及其他效果。"}]},{"ID":"20240308235056-wbqhldw","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240308235056-wbqhldw","updated":"20240308235102"},"Children":[{"Type":"NodeText","Data":"3.9 合并阶段"}]},{"ID":"20240308235103-ug39kkp","Type":"NodeParagraph","Properties":{"id":"20240308235103-ug39kkp","updated":"20240308235150"},"Children":[{"Type":"NodeText","Data":"\t这个阶段会对每个独立片元的颜色很深度进行组合，并最终形成帧缓冲。在大多传统渲染管线中，模板缓冲和深度缓冲的操作都会在这个阶段执行。"}]},{"ID":"20240308235225-u8rptl6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240308235225-u8rptl6","updated":"20240308235319"},"Children":[{"Type":"NodeText","Data":"Early-Z"}]},{"ID":"20240308235319-ftaoq5h","Type":"NodeList","ListData":{},"Properties":{"id":"20240308235319-ftaoq5h","updated":"20240308235322"},"Children":[{"ID":"20240308235322-nppebj0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240308235322-nppebj0","updated":"20240308235322"},"Children":[{"ID":"20240308235322-wni4n35","Type":"NodeParagraph","Properties":{"id":"20240308235322-wni4n35","updated":"20240308235327"},"Children":[{"Type":"NodeText","Data":"要解决的问题"}]},{"ID":"20240308235329-is05o52","Type":"NodeParagraph","Properties":{"id":"20240308235329-is05o52","updated":"20240308235355"},"Children":[{"Type":"NodeText","Data":"有一个片元，它在光栅化阶段生成，并通过了像素着色器。然后在应用z-buffer的时候我们发现，它被之前已经渲染过的某些片元所遮挡，这个片元最终并不会显示在屏幕上。也就是说，我们在像素着色器中对这个片元所进行的处理和计算都是无意义的。造成性能浪费。"}]}]},{"ID":"20240308235355-vf9arwk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240308235355-vf9arwk"},"Children":[{"ID":"20240308235355-2rwsv8y","Type":"NodeParagraph","Properties":{"id":"20240308235355-2rwsv8y","updated":"20240308235410"},"Children":[{"Type":"NodeText","Data":"解决方法"}]},{"ID":"20240308235410-w67jiq2","Type":"NodeParagraph","Properties":{"id":"20240308235410-w67jiq2","updated":"20240308235525"},"Children":[{"Type":"NodeText","Data":"使用合"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并测试，合并测试在执行片元着色器之前进行，"},{"Type":"NodeText","Data":"此时片元的深度值（以及其他任何可以使用的内容，例如模板缓冲或者裁剪测试，即scissor）可以用于对可见性进行测试，不可见的片元将会被直接剔除，这个功能被称作为early-z"}]}]},{"ID":"20240308235527-3iypju9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240308235527-3iypju9"},"Children":[{"ID":"20240308235527-4fut8a4","Type":"NodeParagraph","Properties":{"id":"20240308235527-4fut8a4","updated":"20240308235529"},"Children":[{"Type":"NodeText","Data":"缺点"}]},{"ID":"20240308235529-6e6ilwp","Type":"NodeParagraph","Properties":{"id":"20240308235529-6e6ilwp","updated":"20240308235546"},"Children":[{"Type":"NodeText","Data":"像素着色器可以修改片元的深度值，或者是直接将整个片元丢弃；但是如果在像素着色器中存在这种类型操作的话，那么通常将无法使用early-z，这会降低整个管线的效率。"}]}]},{"ID":"20240308235552-4hjoiyp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240308235552-4hjoiyp"},"Children":[{"ID":"20240308235552-whn8xd9","Type":"NodeParagraph","Properties":{"id":"20240308235552-whn8xd9","updated":"20240308235554"},"Children":[{"Type":"NodeText","Data":"好处"}]},{"ID":"20240308235554-tm1v4bc","Type":"NodeParagraph","Properties":{"id":"20240308235554-tm1v4bc","updated":"20240308235615"},"Children":[{"Type":"NodeText","Data":"Early-会大大提升渲染管线的性能表现。"}]}]}]},{"ID":"20240308235632-elxopej","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240308235632-elxopej","updated":"20240308235643"},"Children":[{"Type":"NodeText","Data":"3.10 计算着色器"}]},{"ID":"20240308235643-78tdesz","Type":"NodeParagraph","Properties":{"id":"20240308235643-78tdesz","updated":"20240308235700"},"Children":[{"Type":"NodeText","Data":"\t"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"计算着色器"},{"Type":"NodeText","Data":"是一种特殊的着色器，但是它并没有锁定在图形管线中的固定位置。它与渲染的过程密切相关，因为它是通过图形API来进行调用的。"}]},{"ID":"20240308235716-2em83jv","Type":"NodeParagraph","Properties":{"id":"20240308235716-2em83jv","updated":"20240308235724"},"Children":[{"Type":"NodeText","Data":"\t计算着色器的其中一个优势在于，它可以访问在GPU上生成的数据。由于在GPU和CPU之间进行通讯是一件效率很低的事情，因此如果我们能够将数据驻留在GPU上，并在GPU上进行计算，那么就可以大幅提高性能表现。计算着色器的一个普遍用途就是后处理计算，即以某种方式来对图像进行修改。"}]},{"ID":"20240308235724-o12oiqd","Type":"NodeParagraph","Properties":{"id":"20240308235724-o12oiqd"}}]}